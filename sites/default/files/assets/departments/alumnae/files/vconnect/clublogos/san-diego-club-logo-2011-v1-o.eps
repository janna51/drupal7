%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: San Diego Club logo 2011 v1-o.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Cicia Lee
%%CreationDate: 3/16/11
%%BoundingBox: 0 0 171 132
%%HiResBoundingBox: 0 0 170.0278 131.0811
%%CropBox: 0 0 170.0278 131.0811
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.0 x399 R agm 4.5188 ct 5.1874%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 12366 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45542F532F542FA92F542F532F8459532F542F842F542F537E542F53%2F542F532F542F5AFFFF2F532F542F5353FD06FF5A2F542F532F54FD06FF%7E542F532F542F532F542F5AFD04FF7E2F070D072F2FFFA8542F532F542F%5AFD06FF59532F542F532F542F532F847E532F542F532FFFFFFF2F542F53%2F7E2F060D067EA984060D062FA8A9070D2F84A82F062F7EA97E2F060D06%53535A2F0D06FFFFA82F0D060D53A8FD06FF7E53060D062F7EFD06FFA97E%0D060D065A535A290D2FFFFFFF530D067E7E7E060D7EFF7E2F060D065AA8%FD06FFA9530D060D075A535A070D53AF530D060D0684A8FFFF84060D2F84%FFA80D070D7EFFFF7E070D07FFA80D2FFFFFFF2F0D7EFFFFFF2F0D072FFD%04FF530DFFFFFFA8070D07FD09FFA80D070D7EFD09FF2F0D0753FD04FF2F%2FFFFF7E0D075AFFFFFF84077EFFFF590D070DFD0AFF070D07A8FD04FF07%5AFFFF530D070D7EFFFFFFA90D07FD04FF2F0D062FFFFFA80D060D595A06%A8FFFF7E0D2FFD04FF5A060D2FFD04FFA906FFFFFF7E0D0607FD0AFF0607%06A8FD09FF2F060D2FFD04FF7E06FFFF5A060D53FD04FF5359FFFF5A060D%06FD0AFF0D06077EFD04FF5A2FFFFFFF0607062FFFFFFF5306A8FD04FFA9%070D07A9FFFF530D072F0754FFFFFF5A0784FD04FF590D0753FD09FFA907%0D07FD0AFF0D070D84FD09FF2F0D0753FD08FF590D072FA8FD07FF590D07%0DFD0AFF070D07A9FD09FF7E070D07FFFFA9075AFD06FF53060D2FFFFFA9%060D060D7EFFFFFF062FFD05FF5A060D2FFFFFFF2F5AFD04FF7E0D060DFD%0AFF060D06A8FD09FF2F060D2FFFFFFF07A8FFFFFF7E060D060D53FD06FF%5A060D06FD0AFF0D060D7EFFFFA906FD05FFA90D060D53FF2F0DA8FD06FF%7E0D070D7EFFFF5A070D2FFFFFFF7E0D59FD05FF5A0D070D7EA95A0D5AFD%04FFA9070D07FD0AFF0D070D7EFD09FF2F0D072F7EA9530D84FD04FF2F07%0D070D077EFD04FF5A0D070DFD0AFF070D072F7EA82F0DFD06FF530D070D%7E0D53FD08FF060D0653FFFF7E07060D7EFFFF2F06FD06FF7E0607060D06%07067EFD04FF7E07060DFD0AFF060D06A8FD09FF2F0607060D060706A8FD%04FF842F060D0607065AFFFFFF7E060706FD0AFF07060D0607060D06FD06%FFA90607060D06FD09FF84070D07FFFF7E070D0753FFA9075AFD06FF5A0D%072FA9FFA82F5AFD04FFA9070D07FD0AFF0D070D84FD09FF2F0D072FFFFF%840D84FD05FFA97E0D0D070D077EFFFF5A0D070DFD0AFF070D075AFFFF5A%0DFD07FF5A070D075AFD09FFA82F060D53FF070D060D06A92F0DA8FD06FF%7E060D2FFFFFFF537EFD04FF7E0D060DFD0AFF060D06A8FD09FF53060D2F%FFFFFF2FA9FD08FF2F0D060D07FFFF7E060D06FD0AFF0D060D7EFFFFFF2F%FD07FF7E0D060D7EFD0AFF590D072F5A0D7E2F070D2F2F2FFD07FF590D07%53FD09FFA9070D07FD0AFF0D070D84FD09FF2F0D0753FD08FF7EFD05FF2F%0D070DFFFF590D070DFD0AFF070D07A9FD0BFFA9070D07A9FD0BFF060D06%0706FF5907060D067EFD07FF5A060D2FFD05FFA82F84FF7E0D0607FD06FF%2F7EFFFF060706A8FD05FF7E53FFFF2F060D2FFD05FF7E2F7E077EFD04FF%84060706FFFF5A060D06FD06FF5A7EFFFF0D06077EFD05FF595AFD04FF7E%0D06077EFD0BFF5A070D077EFFFF070D072FFD08FF530D072FFD05FF5A07%FFFFA9070D07A9FD04FF7E0D7EFFA90D070D7EFD04FFA9075AFFFF2F0D07%53FD05FF542FA9072FFD04FF7E0D0754FFFF590D070DA8FD04FF7E07A8FF%FF070D077EFD04FFA92F53FD04FFA9070D07A9FD0BFFA80D060DA8FFFF5A%060D53FD07FFA92F060D065A7EA87E53062FFFFF2F0D060D2FA87EA8532F%06A9FF7E060D062F7EA87E7E070D7EFFA80D060D067E7EA87E53065AFF0D%062FA8FFA82F060D84FFFF53060D06537EA87E5A060DA8FF7E0D060D0784%7EA87E2F067EFD04FF590D060D59FD0CFF2F0D53FFFFFFA90D07FD07FF2F%0D070D070D070D070D070D59A9070D070D070D070D070D072FFF0D070D07%0D070D070D070D07FF070D070D070D070D070D070D7EFF5A0D070D2F0D07%53A8FF7E0D070D070D070D070D070D2FA9070D070D070D070D070D070DFD%04FF070D070D070D07A9FD0AFFA853FD05FF7EA8FD07FFA9FD0AFFA8FFA8%FD0BFFA8FFA8FD0AFFA9FFA9FD0AFFA8FFFFFFA8A8597E7EA8FD04FFA8FD%0AFFA9A8FD0BFFA8FD04FFA9FD06FFA8FDFCFFFDFCFFFDFCFFFD18FF7E53%072F075A7E532F53A8FFFF532F5384FF2F532F7E2F532F5353FD06FF842F%2F07537EFFA9532F532F537EFFFFFFA853070D53FFFFFF7E2FFFFFA95A2F%53FFFF5A532FFFFFFFA8532F532F5A5AFFFFFF2F532FFF53532F532F53FF%FFA97E2F53072FA9FFFF7E0753075AA9FD10FF530D2FFFFF842FFF530D7E%FFFFFF7E072FFFFFFF06A8FF2F067E060753FD04FF7E067EFFFF07077EFF%530753FF535AFFFFFF5306A97E2FFFFFFF0D06A9FFFF7E0D065AFFFF295A%FD04FF530D7EFF590D06A9FF7E065AFFFF062FFFA906FF7E0D29FFFFFF07%A8FF2F06A8FFA9062FA8FD0EFFA80D0DFD04FFA9FF7E07A9FFFFFFA9077E%FFFFFF0DFFFF2F0D845A077EFD04FF0D2FFFFFFF84075AFF7E077EFFA9A8%FFFFFF2F0D53FFA8FFFFA9070D53FFFFFF2F2F0784FF5384FD04FF7E07A9%FFFF5A0D53FF5A0D59FFFF0D2FFF84A8FF5407A8FD04FFA9A9075AFFFFFF%5A077EFD0EFFA80653FD06FF530D7EFFFFFF7E0D53FFFFFF06FFFF2F062F%062FA8FFFFFF7E0D2FFFFFFFA80D06FF530D295A06FD04FF5A060D2FA8FF%FF537E062FFFFFFF53A80D06A92FA8FD04FF530D7EFFFFA8060DFF7E065A%FFFF060D530D7EFF060DFD06FF530D53FFFFFF530D2FFD0EFF840D2FFD06%FF7E07A9FFFFFFA9077EFFFFFF0DFFFF2F0D597E072FFFFFFFA9072FFD04%FF070DFF7E0753530DFD05FF7E070D07FFA92F532F07A8FFFF2FFF7E0D07%2F84FD04FF7E07A9FFFF7E0D2FFF590D5AFFFF0D2F8407A9FF0D07FFFF7E%597E5A7E077EFFFFFF7E0753FD0EFFA9060DA8FFFFFF59FF53077EFFFFA8%7E0D2FFFFFFF06FFFF2F06A8FF0D06A8FFFFA80706FFFFFF7E0D2FFF530D%53FF7EFFFFFFA87EFF7E060D7E7E07A853072FFF842FFFFF2F0706A8FD04%FF53077EFFFF7E065AFF5A067EFFFF062FFFA9A8A907077EFF840D065A7E%0707FFFFFF530D59FD0FFF5A075AFFFFA82FFF5A077EFFFF07FF0D2FA9FF%7E5AFFFF2F0D2F5A072FA9FFFFFF530D53FFFF5A07A9FF7E077EFD06FF07%5AA92F07FF2F7EFFFF072FA8A907FFFFFF2F0D84FD04FF7E077EFFA9072F%A9FF590D5AFFA90D0DFFFF7E7EA8072FFFFF2F0D7EFF2F0D84FFA92F0DFD%11FF5A072F2F2F537E070D060D062FFF842F2F2F5AA8FF7E0D060D2F537E%FD05FF532F2F2F29A8FFA8060D077EFD05FF53060D077E2F0D07FF7E0D06%2F070D07FFFFFF06A9FFFFFF7E070D062F2F5AA8FFA80D062F7E2F060D06%0D06A9FF842F2F070D2F7EFFFF2F0D2F0D2FAFFDFCFFFDFCFFFDFCFFFDA0%FFA82F2F532F2F2F532F2F2F532F2F2F532F2F2F532F2F2F5AFFFFFF7E2F%2F2F532F2F2F532F2F2F532F2F2F532F2F2F532F2F2F532F2F2F532F2F2F%532F2F2F532F2F2F532F2F2F532F2F2F5353FFFFFF7E2F2F532F2F2F532F%2F2F532F2F2F532F2F2F532F2F53FD19FFA9070D070D070D070D070D070D%070D070D070D070D070D2FFFFFFF590D070D070D070D070D070D070D070D%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D%070D0753FFFFFF7E070D070D070D070D070D070D070D070D070D070D0753%FD19FF7E0D0607060D0607060D0607060D0607060D0607060D062FFFFFFF%5A060D0607060D0607060D0607060D0607060D0607060D0607060D060706%0D0607060D0607060D0607060D0607060D06072FFFFFFF530D0607060D06%07060D0607060D0607060D0607060D2FFD19FFA92F532F2F070D070D070D%070D070D070D070D07542F5353FFFFFF7E542F53070D070D070D070D070D%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D%070D2F532F7EFFFFFF842F532F2F070D070D070D070D070D070D070D0D54%2F5AFD1FFFA87E070D060D060D060D060D07A8FD0CFF7E2F060D060D060D%060D060D077EA9FD0BFF7E2F060D060D060D060D060D077EA8FD0BFFA82F%060D060D060D060D062F59A9FD27FF530D070D070D070D0753FD0EFFA92F%070D070D070D070D07AFFD0FFF2F070D070D070D070D07A9FD0EFF590D07%0D070D070D075AFD2BFF2F0D0607060D060707FD0FFFA80D0607060D0607%062FFD10FF5307060D0607060D067EFD0FFF53060D0607060D062FFD2DFF%2F0D070D070D070DA9FD0FFF5A0D070D070D070D2FFD10FF7E070D070D07%0D0753FD10FF070D070D070D070DA8FD2DFF84060D060D060D065AFD10FF%070D060D060D062FFD10FF2F0D060D060D060DA8FD0FFF7E0D060D060D06%0D53FD2FFF53070D070D070D07FD10FF84070D070D070D07A9FD0EFFA92F%070D070D070D53FD10FF53070D070D070D07FD30FF7E0D0607060D060753%FD10FF2F0607060D06072FFD0EFF5A060D0607060D06A9FD0FFFA8060D06%07060D065AFD31FF2F0D070D070D072FFD10FF7E0D070D070D070DA9FD0D%FF070D070D070D075AFD10FF2F0D070D070D072FA9FD31FFA8060D060D06%0D067EFD10FF070D060D060D065AFD0CFF530D060D060D062FA9FD0FFF7E%0D060D060D060D53FD33FF53070D070D070D07FD10FF84070D070D070D07%FD0BFFA92F070D070D070D59FD10FF53070D070D070D07FD34FF7E0D0607%060D060753FD10FF2F0607060D06072FFD0AFF5A060D0607060D06FD10FF%7E060D0607060D065AFD35FF2F0D070D070D072FFD10FF7E0D070D070D07%0D84FD09FF070D070D070D077EFD10FF0D0D070D070D072FA9FD35FFA806%0D060D060D067EFD10FF070D060D060D0653FD08FF530D060D060D062FA9%FD0FFF7E0D060D060D060D53FD37FF53070D070D070D07FD10FFA9070D07%0D070D07A9FD06FFA92F070D070D070D59FD10FF2F070D070D070D07FD38%FF7E0D0607060D060753FD10FF2F0607060D06072FFD06FF5A060D060706%0D06FD10FF7E060D0607060D065AFD39FF2F0D070D070D072FFD10FF840D%070D070D070D84FD05FF070D070D070D077EFD10FF0D0D070D070D072FFD%3AFFA8060D060D060D067EFD10FF2F0D060D060D0653FD04FF530D060D06%0D062FA9FD0FFF7E0D060D060D060D7EFD3BFF53070D070D070D07FD10FF%A9070D070D070D07A9FFFFA92F070D070D070D59FD10FF2F070D070D070D%07FD3CFF7E0D0607060D060753FD10FF2F0607060D06072FFFFF5A060D06%07060D06FD10FF7E060D0607060D067EFD3DFF2F0D070D070D070DA9FD0F%FF840D070D070D070D84FF070D070D070D077EFD10FF0D0D070D070D072F%FD3EFFAF060D060D060D065AFD10FF2F0D060D060D0653530D060D060D06%2FA9FD0FFF7E0D060D060D060D7EFD3FFF5A070D070D070D07FD10FFA907%0D070D070D072F070D070D070D59FD10FF2F070D070D070D07FD40FFA80D%0607060D06072FFD10FF2F0607060D0607060D0607060D06FD10FF7E060D%0607060D067EFD41FF530D070D070D070DA9FD0FFF840D070D070D070D07%0D070D077EFD10FF0D0D070D070D072FFD42FFAF060D060D060D065AFD10%FF2F0D060D060D060D060D062FA9FD0FFF7E0D060D060D060D7EFD43FF5A%070D070D070D07FD10FFA9070D070D070D070D070D59FD10FF2F070D070D%070D07FD44FFA80D0607060D06072FFD10FF2F0607060D0607060D06FD10%FF7E060D0607060D067EFD45FF530D070D070D070DA9FD0FFF840D070D07%0D070D077EFD10FF0D0D070D070D072FFD46FFAF060D060D060D065AFD10%FF2F0D060D060D062FFD10FF7E0D060D060D060D7EFD47FF5A070D070D07%0D07FD0FFFA82F070D070D070D07A9FD0FFF2F070D070D070D07FD48FFA8%0D0607060D06072FFD0EFF53060D0607060D06072FFD0EFF7E060D060706%0D067EFD49FF530D070D070D070DA9FD0DFF070D070D070D070D070D84FD%0DFF0D0D070D070D072FFD4AFFAF060D060D060D065AFD0CFF530D060D06%0D060D060D0653FD0CFF7E0D060D060D060D7EFD4BFF5A070D070D070D07%FD0BFFA80D070D070D070D070D070D07A9FD0BFF2F070D070D070D2FFD4C%FFA80D0607060D06072FFD0AFF53060D0607060D0607060D06072FFD0AFF%7E060D0607060D06A8FD4DFF530D070D070D070DA9FD09FF070D070D070D%070D070D070D070D7EFD09FF0D0D070D070D0753FD4EFFAF060D060D060D%065AFD08FF530D060D060D062F530D060D060D062FFD08FF7E0D060D060D%060D7EFD4FFF5A070D070D070D07FD07FFA80D070D070D070D7EFF070D07%0D070D0784FD07FF2F070D070D070D2FFD50FFA80D0607060D06072FFD06%FF53060D0607060D07FFFF5A0607060D060706FD06FF7E060D0607060D06%A8FD51FF5A0D070D070D070DA9FD05FF070D070D070D0784FFFFA90D070D%070D070D7EFD05FF0D0D070D070D0753FD53FF070D060D060D065AFD04FF%530D060D060D062FFD04FF530D060D060D062FFD04FF530D060D060D060D%7EFD53FF7E070D070D070D07FFFFFFA80D070D070D070D7EFD05FF070D07%0D070D0784FFFFA92F070D070D070D2FFD54FFA80D0607060D06072FFFFF%53060D0607060D07FD06FF5A0607060D060706FFFF5A060D0607060D06A8%FD55FF5A0D070D070D070DA9FF070D070D070D0784FD06FFA90D070D070D%070D7EFF070D070D070D0753FD57FF070D060D060D065A530D060D060D06%2FFD08FF530D060D060D062F530D060D060D060D7EFD57FF7E070D070D07%0D070D070D070D070D7EFD09FF070D070D070D070D070D070D070D2FFD58%FFA80D0607060D0607060D0607060D07FD0AFF5A0607060D0607060D0607%060D06A8FD59FF5A0D070D070D070D070D070D07A9FD0AFFA90D070D070D%070D070D070D0753FD5BFF070D060D060D060D060D0653FD0CFF530D060D%060D060D060D060D7EFD5BFF7E070D070D070D070D070D7EFD0DFF070D07%0D070D070D070D2FFD5CFFA80D0607060D0607060D2FFD0EFF5A0607060D%0607060D06A8FD5DFF5A0D070D070D070D07A9FD0EFFA90D070D070D070D%0753FD5FFF070D060D060D0653FD10FF530D060D060D060D7EFD5FFF7E07%0D070D070D7EFD11FF070D070D070D53FD60FFA80D0607060D2FFD12FF7E%0607060D06A9FD61FF5A0D070D07A9FD13FF2F070D075AFD63FF070D0653%FD14FF530D060DA8FD63FF7E2F537EFD15FF2F5359FDB1FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 280 C)
%%CMYKCustomColor: 1 0.7200 0 0.1800 (PANTONE 280 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2011-03-16T10:28:07-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2011-03-16T10:28:07-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2011-03-16T10:28:07-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AE/nn5EvfJ1xZalo+oXza&#xA;Tflo5VlnkcxXA+IDlt8Lr9kHf4TnQaDUDKCJAWHSa/FLHUok0fNln5GaToPmv8vNU068ur038lyi&#xA;6my3MgcBCXt3iP7C0JBG9Spr2zG185Y8oIAqttvm5GhAyYiCTfXd475stNa8q+crvRNRvryW3s7g&#xA;AsJnV5bZiGVlNSAXjP0HNnhMcmMSAG/3utzGePJwkmr7+j0j83NKtL7X/KOkeUL28l1PVrSBUP1i&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:EF80265D0820681188C6AF33B70074B5</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:EF80265D0820681188C6AF33B70074B5</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:EE80265D0820681188C6AF33B70074B5</stRef:instanceID>
            <stRef:documentID>xmp.did:EE80265D0820681188C6AF33B70074B5</stRef:documentID>
            <stRef:originalDocumentID>uuid:E3B705F59336E0118987E9F32614B546</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:20:43-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:20:57-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:24:10-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:24:28-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:24:53-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:25:04-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FD7F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:26:04-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:26:17-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FF7F11740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:26:45-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:008011740720681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:26:56-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EC80265D0820681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:27:14-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ED80265D0820681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:27:22-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EE80265D0820681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:27:59-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EF80265D0820681188C6AF33B70074B5</stEvt:instanceID>
                  <stEvt:when>2011-03-16T10:28:07-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:E3B705F59336E0118987E9F32614B546</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>8.500000</stDim:w>
            <stDim:h>11.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 280 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Red</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Yellow</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Green</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Cyan</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Blue</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Magenta</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 Y=90 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.999998</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>80.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>35.000004</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=0 Y=90 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>5.000001</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 Y=95 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>30.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>30.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=10 Y=45 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>45.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=15 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.000000</xmpG:cyan>
                           <xmpG:magenta>14.999998</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=95 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=25 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=100 Y=35 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>35.000004</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000002</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=95 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>19.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=45 Y=50 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>5.000001</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=60 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=55 M=60 Y=65 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>55.000000</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>39.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=40 Y=65 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>30.000002</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=60 Y=80 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=65 Y=90 K=35</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>65.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>35.000004</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 282 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>68.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>53.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 280 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>72.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>18.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grayscale</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=100</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>255</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=90</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>229</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=80</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>203</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=70</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>178</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=60</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>152</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=50</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>127</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=40</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>101</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=30</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>76</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=20</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>50</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=10</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>25</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=5</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>12</xmpG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -131.081 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 131.081 li
170.028 131.081 li
170.028 0 li
cp
clp
[1 0 0 1 0 0 ]ct
29.8101 1.61475 mo
29.1353 1.76172 28.811 1.99658 28.6055 2.26074 cv
28.2832 2.73047 27.7842 3.66943 26.9912 5.51953 cv
25.5532 8.95508 22.2349 16.2661 20.7959 20.0835 cv
20.6191 20.23 20.2085 20.3184 19.8271 20.3184 cv
19.5044 20.3184 19.2402 20.23 19.0342 20.0835 cv
18.7114 19.3779 18.2705 18.3218 17.9185 17.4995 cv
16.6851 14.7104 li
16.2749 13.7705 15.8921 12.8892 15.6284 12.4487 cv
15.3643 12.9482 15.0112 13.6538 14.6299 14.4756 cv
13.2505 17.4697 li
12.8096 18.4097 12.4863 19.2612 12.0166 20.23 cv
11.8701 20.3765 11.4888 20.4648 11.0479 20.4648 cv
10.7251 20.4648 10.5488 20.3765 10.2837 20.23 cv
9.81396 18.9966 8.64014 16.354 7.64209 14.1523 cv
2.82617 3.64014 li
2.0332 1.90869 1.85742 1.76172 .888184 1.55615 cv
.153809 1.40967 li
-.0805664 1.11523 -.0507813 .528809 .272461 .380859 cv
1.3584 .44043 2.59131 .470215 4.08936 .470215 cv
5.38135 .470215 6.52637 .44043 7.64209 .380859 cv
7.87646 .499512 7.99414 1.23291 7.70117 1.40967 cv
7.17188 1.49707 li
6.64355 1.58545 6.4375 1.73193 6.4375 1.9375 cv
6.4375 2.14355 7.0542 3.52344 7.96484 5.57861 cv
10.8721 12.0679 li
11.6938 13.8882 11.9868 14.5044 12.3398 15.2095 cv
12.6919 14.5635 13.1626 13.6826 13.749 12.3613 cv
14.1309 11.5098 li
14.3364 11.0396 14.5127 10.3945 14.5127 10.2178 cv
14.5127 10.041 14.4536 9.71826 14.3364 9.4248 cv
11.5181 3.22998 li
10.8423 1.76172 10.6367 1.55615 9.52051 1.43848 cv
9.22705 1.40967 li
8.93408 1.17432 8.99219 .499512 9.31543 .380859 cv
10.5776 .44043 11.7231 .470215 13.0151 .470215 cv
14.5127 .470215 15.6284 .44043 16.3911 .380859 cv
16.7437 .470215 16.7144 1.2627 16.5088 1.40967 cv
16.0103 1.52686 li
15.6572 1.61475 15.2168 1.73193 15.2168 1.9375 cv
15.2168 2.17285 15.335 2.49561 15.4814 2.81836 cv
16.3618 4.84521 li
16.6265 5.46143 16.9204 6.10693 17.1841 6.63574 cv
17.4775 6.01904 17.7715 5.43213 18.0649 4.78564 cv
18.3296 4.19873 li
18.8286 3.08252 19.1221 2.20215 19.1221 2.02588 cv
19.1221 1.8208 19.0049 1.73193 18.5352 1.61475 cv
17.6543 1.40967 li
17.4482 1.20313 17.4775 .528809 17.7427 .380859 cv
18.5938 .44043 19.6504 .470215 20.6191 .470215 cv
21.7646 .470215 22.8516 .44043 23.6147 .380859 cv
23.8491 .528809 23.9082 1.23291 23.6436 1.43848 cv
22.8218 1.61475 li
21.8232 1.8208 21.6182 1.9375 20.5903 3.69971 cv
19.8853 4.90283 19.1509 6.25391 18.77 7.0166 cv
18.5059 7.54541 18.1245 8.39697 18.1245 8.54395 cv
18.1245 8.63184 18.1533 8.80811 18.3589 9.27832 cv
19.7388 12.2432 li
20.502 13.8584 20.8545 14.7104 21.0303 15.1216 cv
22.4399 11.7153 23.8203 8.07471 25.2295 4.49219 cv
25.4346 3.99316 26.022 2.31885 26.022 1.99658 cv
26.022 1.79102 25.8462 1.70264 25.4639 1.58545 cv
24.8184 1.40967 li
24.5835 1.14453 24.6426 .528809 24.9067 .380859 cv
25.8462 .44043 27.021 .470215 27.9014 .470215 cv
28.9292 .470215 29.7803 .44043 30.6025 .380859 cv
30.8672 .528809 30.896 1.17432 30.6909 1.40967 cv
29.8101 1.61475 li
cp
false sop
/0 
<<
/Name (PANTONE 280 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .72 0 .18 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
38.0898 8.10352 mo
38.0898 8.92627 38.1187 8.98438 38.9121 8.98438 cv
40.9375 8.98438 li
42.4644 8.98438 42.8169 8.77881 43.1104 7.37012 cv
43.2573 6.63574 li
43.4629 6.40088 44.1963 6.40088 44.3442 6.66455 cv
44.2852 7.60498 44.2559 8.66162 44.2559 9.77783 cv
44.2559 10.8936 44.2852 11.9502 44.3442 12.8892 cv
44.1963 13.1543 43.4629 13.1831 43.2573 12.9189 cv
43.1104 12.1851 li
42.8169 10.7754 42.4644 10.5405 40.9375 10.5405 cv
38.9121 10.5405 li
38.1187 10.5405 38.0898 10.5698 38.0898 11.4512 cv
38.0898 14.9448 li
38.0898 16.2959 38.208 17.2354 38.5591 17.7344 cv
38.9414 18.2622 39.4985 18.4971 41.6426 18.4971 cv
44.1963 18.4971 45.1953 18.4097 46.8101 15.0918 cv
47.0449 14.769 47.7788 14.8862 47.897 15.2378 cv
47.7788 16.7651 47.0742 19.1436 46.6636 19.9365 cv
45.1074 19.8774 42.2886 19.8486 39.8809 19.8486 cv
36.064 19.8486 li
34.6543 19.8486 33.2153 19.8774 31.0132 19.9365 cv
30.7783 19.7603 30.7783 19.0552 31.0132 18.9087 cv
32.3936 18.7036 li
33.7153 18.4971 33.8911 18.3218 33.8911 15.6206 cv
33.8911 4.66846 li
33.8911 1.99658 33.7153 1.8208 32.3936 1.55615 cv
31.6597 1.40967 li
31.395 1.23291 31.4248 .557617 31.7178 .380859 cv
33.0986 .44043 34.5366 .470215 35.9458 .470215 cv
42.1714 .470215 li
44.0503 .470215 45.7236 .44043 46.105 .380859 cv
46.1343 .851563 46.3398 2.96533 46.4873 4.93262 cv
46.3696 5.25586 45.6943 5.31396 45.4009 5.05029 cv
45.0781 4.02246 44.6665 3.1416 44.2852 2.73047 cv
43.7271 2.17285 42.8462 1.8208 41.4072 1.8208 cv
39.0586 1.8208 li
38.0898 1.8208 38.0898 1.87939 38.0898 2.96533 cv
38.0898 8.10352 li
cp
f
55.7358 14.9746 mo
55.7358 16.354 55.8535 17.2939 56.2349 17.7637 cv
56.6172 18.2622 57.1445 18.4971 59.2881 18.4971 cv
61.9609 18.4971 62.7822 18.4097 64.5142 15.0039 cv
64.7495 14.7104 65.4248 14.8276 65.6304 15.1797 cv
65.4839 16.707 64.7793 19.1436 64.3682 19.9365 cv
62.8115 19.8774 59.9932 19.8486 57.5854 19.8486 cv
53.6509 19.8486 li
52.3003 19.8486 50.832 19.8774 49.0117 19.9365 cv
48.7476 19.7603 48.6885 19.0854 48.9233 18.9087 cv
50.04 18.7617 li
51.3608 18.5864 51.5366 18.3516 51.5366 15.6206 cv
51.5366 4.69775 li
51.5366 1.9668 51.3608 1.70264 50.04 1.52686 cv
49.188 1.40967 li
48.894 1.23291 48.894 .557617 49.2471 .380859 cv
50.7739 .44043 52.2422 .470215 53.6509 .470215 cv
55.0601 .470215 56.5278 .44043 57.9961 .380859 cv
58.231 .557617 58.231 1.23291 57.9961 1.40967 cv
57.2334 1.52686 li
55.9121 1.73193 55.7358 1.9668 55.7358 4.69775 cv
55.7358 14.9746 li
cp
f
73.2935 14.9746 mo
73.2935 16.354 73.4116 17.2939 73.793 17.7637 cv
74.1748 18.2622 74.7026 18.4971 76.8467 18.4971 cv
79.5186 18.4971 80.3408 18.4097 82.0723 15.0039 cv
82.3081 14.7104 82.9829 14.8276 83.189 15.1797 cv
83.0415 16.707 82.3384 19.1436 81.9263 19.9365 cv
80.3696 19.8774 77.5518 19.8486 75.144 19.8486 cv
71.2095 19.8486 li
69.8579 19.8486 68.3901 19.8774 66.5698 19.9365 cv
66.3057 19.7603 66.2476 19.0854 66.4819 18.9087 cv
67.5977 18.7617 li
68.9189 18.5864 69.0952 18.3516 69.0952 15.6206 cv
69.0952 4.69775 li
69.0952 1.9668 68.9189 1.70264 67.5977 1.52686 cv
66.7461 1.40967 li
66.4521 1.23291 66.4521 .557617 66.8052 .380859 cv
68.3315 .44043 69.7998 .470215 71.2095 .470215 cv
72.6187 .470215 74.0859 .44043 75.5552 .380859 cv
75.7896 .557617 75.7896 1.23291 75.5552 1.40967 cv
74.7915 1.52686 li
73.4697 1.73193 73.2935 1.9668 73.2935 4.69775 cv
73.2935 14.9746 li
cp
f
90.9985 8.10352 mo
90.9985 8.92627 91.0288 8.98438 91.8208 8.98438 cv
93.8462 8.98438 li
95.3735 8.98438 95.7261 8.77881 96.019 7.37012 cv
96.1675 6.63574 li
96.3726 6.40088 97.106 6.40088 97.2524 6.66455 cv
97.1938 7.60498 97.1646 8.66162 97.1646 9.77783 cv
97.1646 10.8936 97.1938 11.9502 97.2524 12.8892 cv
97.106 13.1543 96.3726 13.1831 96.1675 12.9189 cv
96.019 12.1851 li
95.7261 10.7754 95.3735 10.5405 93.8462 10.5405 cv
91.8208 10.5405 li
91.0288 10.5405 90.9985 10.5698 90.9985 11.4512 cv
90.9985 14.9448 li
90.9985 16.2959 91.1157 17.2354 91.4683 17.7344 cv
91.8501 18.2622 92.4087 18.4971 94.5513 18.4971 cv
97.106 18.4971 98.104 18.4097 99.7192 15.0918 cv
99.9536 14.769 100.688 14.8862 100.806 15.2378 cv
100.688 16.7651 99.9839 19.1436 99.5728 19.9365 cv
98.0171 19.8774 95.1978 19.8486 92.7896 19.8486 cv
88.9722 19.8486 li
87.563 19.8486 86.1245 19.8774 83.9229 19.9365 cv
83.688 19.7603 83.688 19.0552 83.9229 18.9087 cv
85.3032 18.7036 li
86.6235 18.4971 86.8003 18.3218 86.8003 15.6206 cv
86.8003 4.66846 li
86.8003 1.99658 86.6235 1.8208 85.3032 1.55615 cv
84.5684 1.40967 li
84.3042 1.23291 84.3335 .557617 84.6274 .380859 cv
86.0073 .44043 87.4458 .470215 88.855 .470215 cv
95.0806 .470215 li
96.9585 .470215 98.6333 .44043 99.0161 .380859 cv
99.0435 .851563 99.2495 2.96533 99.396 4.93262 cv
99.2788 5.25586 98.604 5.31396 98.3101 5.05029 cv
97.9878 4.02246 97.5757 3.1416 97.1938 2.73047 cv
96.6362 2.17285 95.7554 1.8208 94.3169 1.8208 cv
91.9683 1.8208 li
90.9985 1.8208 90.9985 1.87939 90.9985 2.96533 cv
90.9985 8.10352 li
cp
f
108.058 20.3184 mo
105.357 20.3184 103.682 19.5547 103.066 19.2026 cv
102.508 18.5562 102.126 16.4429 102.126 14.4453 cv
102.333 14.064 103.007 14.0347 103.242 14.3579 cv
103.83 16.2661 105.796 18.9673 108.293 18.9673 cv
110.465 18.9673 111.463 17.4697 111.463 16.002 cv
111.463 13.624 109.232 12.2139 107.47 11.3335 cv
105.357 10.2759 103.037 8.51514 103.037 5.60742 cv
103.007 2.28955 105.59 0 109.849 0 cv
110.817 0 112.021 .117188 113.196 .470215 cv
113.578 .586914 113.841 .64502 114.194 .70459 cv
114.43 1.35059 114.722 2.93555 114.722 4.90283 cv
114.576 5.25586 113.841 5.28516 113.578 4.99121 cv
113.079 3.49365 111.817 1.35059 109.702 1.35059 cv
107.764 1.35059 106.708 2.61328 106.708 4.08154 cv
106.708 5.43213 107.912 6.66455 109.379 7.42822 cv
111.317 8.45654 li
113.137 9.4248 115.458 11.1279 115.458 14.3579 cv
115.458 17.9692 112.492 20.3184 108.058 20.3184 cv
cp
f
123.415 14.9746 mo
123.415 16.354 123.532 17.2939 123.914 17.7637 cv
124.295 18.2622 124.824 18.4971 126.967 18.4971 cv
129.638 18.4971 130.46 18.4097 132.193 15.0039 cv
132.427 14.7104 133.103 14.8276 133.307 15.1797 cv
133.162 16.707 132.458 19.1436 132.047 19.9365 cv
130.491 19.8774 127.671 19.8486 125.263 19.8486 cv
121.33 19.8486 li
119.978 19.8486 118.509 19.8774 116.691 19.9365 cv
116.425 19.7603 116.368 19.0854 116.601 18.9087 cv
117.717 18.7617 li
119.039 18.5864 119.214 18.3516 119.214 15.6206 cv
119.214 4.69775 li
119.214 1.9668 119.039 1.70264 117.717 1.52686 cv
116.865 1.40967 li
116.572 1.23291 116.572 .557617 116.924 .380859 cv
118.452 .44043 119.92 .470215 121.33 .470215 cv
122.739 .470215 124.207 .44043 125.674 .380859 cv
125.91 .557617 125.91 1.23291 125.674 1.40967 cv
124.912 1.52686 li
123.589 1.73193 123.415 1.9668 123.415 4.69775 cv
123.415 14.9746 li
cp
f
141.119 8.10352 mo
141.119 8.92627 141.148 8.98438 141.941 8.98438 cv
143.966 8.98438 li
145.493 8.98438 145.846 8.77881 146.139 7.37012 cv
146.288 6.63574 li
146.492 6.40088 147.226 6.40088 147.373 6.66455 cv
147.314 7.60498 147.285 8.66162 147.285 9.77783 cv
147.285 10.8936 147.314 11.9502 147.373 12.8892 cv
147.226 13.1543 146.492 13.1831 146.288 12.9189 cv
146.139 12.1851 li
145.846 10.7754 145.493 10.5405 143.966 10.5405 cv
141.941 10.5405 li
141.148 10.5405 141.119 10.5698 141.119 11.4512 cv
141.119 14.9448 li
141.119 16.2959 141.236 17.2354 141.589 17.7344 cv
141.971 18.2622 142.53 18.4971 144.671 18.4971 cv
147.226 18.4971 148.225 18.4097 149.839 15.0918 cv
150.075 14.769 150.809 14.8862 150.924 15.2378 cv
150.809 16.7651 150.104 19.1436 149.693 19.9365 cv
148.135 19.8774 145.318 19.8486 142.91 19.8486 cv
139.093 19.8486 li
137.684 19.8486 136.244 19.8774 134.042 19.9365 cv
133.808 19.7603 133.808 19.0552 134.042 18.9087 cv
135.422 18.7036 li
136.744 18.4971 136.92 18.3218 136.92 15.6206 cv
136.92 4.66846 li
136.92 1.99658 136.744 1.8208 135.422 1.55615 cv
134.69 1.40967 li
134.424 1.23291 134.454 .557617 134.747 .380859 cv
136.127 .44043 137.567 .470215 138.975 .470215 cv
145.201 .470215 li
147.08 .470215 148.752 .44043 149.134 .380859 cv
149.165 .851563 149.37 2.96533 149.516 4.93262 cv
149.399 5.25586 148.724 5.31396 148.43 5.05029 cv
148.107 4.02246 147.696 3.1416 147.314 2.73047 cv
146.757 2.17285 145.875 1.8208 144.437 1.8208 cv
142.087 1.8208 li
141.119 1.8208 141.119 1.87939 141.119 2.96533 cv
141.119 8.10352 li
cp
f
162.2 15.6206 mo
162.2 18.3516 162.376 18.5864 163.698 18.7617 cv
164.872 18.9087 li
165.079 19.0854 165.079 19.7603 164.872 19.9365 cv
162.964 19.8774 161.524 19.8486 160.117 19.8486 cv
158.705 19.8486 157.238 19.8774 155.505 19.9365 cv
155.27 19.7603 155.27 19.0854 155.505 18.9087 cv
156.503 18.7617 li
157.826 18.5562 158.002 18.3516 158.002 15.6206 cv
158.002 14.1523 li
158.002 12.6841 157.971 12.2139 157.208 10.6582 cv
153.713 3.43506 li
153.128 2.23145 152.864 1.76172 151.834 1.58545 cv
150.837 1.40967 li
150.573 1.17432 150.602 .470215 150.955 .380859 cv
152.275 .44043 153.362 .470215 155.094 .470215 cv
156.885 .470215 158.383 .44043 159.38 .380859 cv
159.646 .499512 159.705 1.17432 159.44 1.40967 cv
158.442 1.64404 li
157.913 1.76172 157.737 1.87939 157.737 1.90869 cv
157.737 2.14355 157.883 2.58301 158.501 3.96387 cv
159.879 7.10547 li
160.321 8.07471 160.878 9.24902 161.231 9.98291 cv
162.082 8.54395 162.905 6.84131 163.698 5.34326 cv
164.813 3.25879 165.224 2.28955 165.224 1.9375 cv
165.224 1.76172 164.931 1.64404 164.226 1.52686 cv
163.549 1.40967 li
163.317 1.2627 163.286 .528809 163.58 .380859 cv
164.753 .44043 165.811 .470215 166.869 .470215 cv
167.983 .470215 168.894 .44043 169.745 .380859 cv
170.099 .499512 170.099 1.20313 169.864 1.40967 cv
169.101 1.55615 li
168.572 1.64404 168.014 1.84912 167.691 2.26074 cv
167.251 2.81836 166.515 3.87549 165.106 6.42969 cv
163.257 9.77783 li
162.494 11.1567 162.2 11.8911 162.2 13.5649 cv
162.2 15.6206 li
cp
f
91.0972 54.2432 mo
96.2847 54.2432 98.0737 57.6206 95.188 63.3003 cv
85.1567 83.1738 li
75.1265 63.3003 li
72.2397 57.6206 74.0142 54.2432 79.2007 54.2432 cv
91.0972 54.2432 li
cp
101.226 114.964 mo
89.8804 92.5225 li
104.926 62.8135 li
109.309 54.3403 110.379 53.8535 117.782 53.8535 cv
117.782 49.5688 li
52.5327 49.5688 li
52.5327 53.8535 li
59.9341 53.8535 61.1021 54.3403 65.3872 62.8135 cv
80.4341 92.5225 li
69.0884 114.964 li
42.502 62.2285 li
39.3853 55.9966 40.1646 53.8535 44.498 53.8535 cv
47.2739 53.8535 li
47.2739 49.5688 li
17.0845 49.5688 li
17.0845 53.8213 li
18.6421 53.9185 li
28.3809 54.5029 29.063 55.0229 33.5425 63.9819 cv
67.5308 131.081 li
70.354 131.081 li
85.1567 101.857 li
99.9604 131.081 li
102.785 131.081 li
136.772 63.9819 li
141.252 55.0229 141.933 54.438 151.672 53.8535 cv
152.316 53.813 li
152.316 49.5688 li
123.041 49.5688 li
123.041 53.8535 li
125.816 53.8535 li
130.15 53.8535 130.928 55.9966 127.812 62.2285 cv
101.226 114.964 li
cp
f
19.3857 29.7681 mo
19.3857 30.0386 19.4307 31.2388 19.5659 32.1079 cv
19.5059 32.2886 19.1006 32.3481 18.9956 32.2134 cv
18.5908 30.8188 17.6309 30.0688 16.1758 30.0688 cv
14.5107 30.0688 12.7261 31.4937 12.7261 34.478 cv
12.7261 37.4634 14.4507 39.0679 16.251 39.0679 cv
18.0659 39.0679 18.9058 37.7632 19.3105 36.7437 cv
19.4307 36.6235 19.7905 36.6685 19.8809 36.8481 cv
19.7759 37.9585 19.5205 38.8579 19.3105 39.2026 cv
18.5005 39.4282 17.4355 39.7583 16.2656 39.7583 cv
14.7959 39.7583 13.2959 39.4126 12.231 38.6177 cv
11.1509 37.7935 10.3262 36.5483 10.3262 34.688 cv
10.3262 32.8579 11.106 31.5688 12.1411 30.7134 cv
13.2061 29.8286 14.7358 29.3784 16.2959 29.3784 cv
17.8257 29.3784 18.9355 29.7388 19.3857 29.7681 cv
cp
f
24.1411 37.0278 mo
24.1411 37.7329 24.2012 38.2134 24.396 38.4526 cv
24.5908 38.7085 24.8608 38.8276 25.9561 38.8276 cv
27.3208 38.8276 27.7407 38.7827 28.626 37.0435 cv
28.7456 36.8931 29.0908 36.9536 29.1958 37.1333 cv
29.1206 37.9136 28.7607 39.1577 28.5508 39.563 cv
27.7559 39.5327 26.3159 39.5181 25.0859 39.5181 cv
23.0762 39.5181 li
22.3862 39.5181 21.6362 39.5327 20.7061 39.563 cv
20.5713 39.4731 20.541 39.1284 20.6611 39.0376 cv
21.231 38.9634 li
21.9063 38.8735 21.9961 38.7534 21.9961 37.3579 cv
21.9961 31.7788 li
21.9961 30.3833 21.9063 30.2485 21.231 30.1587 cv
20.7959 30.0981 li
20.646 30.0083 20.646 29.6636 20.8262 29.5737 cv
21.606 29.603 22.356 29.6187 23.0762 29.6187 cv
23.7959 29.6187 24.5459 29.603 25.2959 29.5737 cv
25.416 29.6636 25.416 30.0083 25.2959 30.0981 cv
24.9058 30.1587 li
24.231 30.2632 24.1411 30.3833 24.1411 31.7788 cv
24.1411 37.0278 li
cp
f
30.3809 31.7788 mo
30.3809 30.3833 30.291 30.2935 29.6162 30.1587 cv
29.2412 30.0835 li
29.1211 29.9937 29.106 29.6636 29.271 29.5737 cv
29.9912 29.603 30.7412 29.6187 31.4609 29.6187 cv
32.1958 29.6187 32.9312 29.603 33.6509 29.5737 cv
33.771 29.6636 33.771 29.9937 33.6509 30.0835 cv
33.291 30.1431 li
32.6157 30.2632 32.5259 30.3833 32.5259 31.7788 cv
32.5259 35.2437 li
32.5259 36.9985 32.7207 38.9331 35.001 38.9331 cv
36.9209 38.9331 37.5059 37.2534 37.5059 35.1978 cv
37.5059 33.3833 li
37.5059 32.1685 37.4458 31.0288 37.2808 30.6382 cv
37.146 30.3237 36.8159 30.2339 36.4106 30.1587 cv
36.0059 30.0835 li
35.8857 29.9634 35.916 29.6636 36.0059 29.5737 cv
36.8159 29.603 37.4009 29.6187 38.0156 29.6187 cv
38.5708 29.6187 39.1255 29.603 39.6958 29.5737 cv
39.7856 29.6636 39.8154 29.9634 39.6958 30.0835 cv
39.4258 30.1431 li
39.0356 30.2339 38.7505 30.3237 38.6157 30.6382 cv
38.4507 31.0288 38.3906 32.1685 38.3906 33.3833 cv
38.3906 35.063 li
38.3906 36.4731 38.2559 37.7632 37.4307 38.6782 cv
36.771 39.3833 35.6758 39.7583 34.4609 39.7583 cv
33.3208 39.7583 32.3008 39.5776 31.4912 38.9185 cv
30.7109 38.2729 30.3809 37.1636 30.3809 35.5278 cv
30.3809 31.7788 li
cp
f
43.8506 36.9829 mo
43.8506 38.1528 44.0005 38.8882 45.1704 38.8882 cv
46.2808 38.8882 46.8657 38.0327 46.8657 36.8179 cv
46.8657 35.5132 46.1157 34.5981 44.6758 34.5981 cv
43.8506 34.5981 43.8506 34.6128 43.8506 35.2134 cv
43.8506 36.9829 li
cp
43.8506 33.5181 mo
43.8506 33.9087 43.8657 33.938 44.6455 33.938 cv
45.9355 33.938 46.4155 33.1138 46.4155 32.2134 cv
46.4155 30.9087 45.6055 30.2632 44.5708 30.2632 cv
43.8657 30.2632 43.8506 30.3833 43.8506 31.0435 cv
43.8506 33.5181 li
cp
41.7808 32.063 mo
41.7808 30.5483 41.7505 30.3989 41.1206 30.3081 cv
40.7158 30.2485 li
40.5806 30.1733 40.5508 29.7231 40.7759 29.7085 cv
41.9155 29.6333 43.0107 29.5737 44.5107 29.5737 cv
45.9507 29.5737 46.9106 29.7388 47.5703 30.1284 cv
48.2153 30.5181 48.6055 31.1479 48.6055 32.0337 cv
48.6055 33.2935 47.5405 33.7886 47.0757 33.9087 cv
46.9253 33.938 46.7754 33.9985 46.7754 34.0737 cv
46.7754 34.1187 46.8506 34.1636 46.9854 34.1929 cv
48.1704 34.4487 49.1753 35.228 49.1904 36.6831 cv
49.2056 38.063 48.3804 38.8735 47.4355 39.2026 cv
46.4907 39.5327 45.3657 39.5776 44.4507 39.5776 cv
43.9106 39.5776 43.3408 39.5181 42.9058 39.5181 cv
42.1709 39.5181 41.4355 39.5327 40.5806 39.563 cv
40.4609 39.4731 40.4609 39.0835 40.5806 39.0376 cv
41.0156 38.9478 li
41.6909 38.813 41.7808 38.7085 41.7808 37.3579 cv
41.7808 32.063 li
cp
f
59.4805 30.0688 mo
57.6353 30.0688 56.6455 31.7935 56.6455 34.2983 cv
56.6455 36.1284 57.2905 39.0679 59.7354 39.0679 cv
61.7002 39.0679 62.4653 37.1479 62.4653 34.7183 cv
62.4653 32.1538 61.3403 30.0688 59.4805 30.0688 cv
cp
64.8652 34.5229 mo
64.8652 37.7935 62.6753 39.7583 59.4502 39.7583 cv
56.4355 39.7583 54.2456 37.7778 54.2456 34.6431 cv
54.2456 31.6733 56.4653 29.3784 59.6001 29.3784 cv
62.7202 29.3784 64.8652 31.478 64.8652 34.5229 cv
cp
f
69.5454 33.6382 mo
69.5454 34.0435 69.5601 34.0884 69.9653 34.0884 cv
71.1201 34.0884 li
71.915 34.0884 72.0801 33.9829 72.23 33.2485 cv
72.3052 32.8882 li
72.4102 32.7534 72.7852 32.7681 72.875 32.9038 cv
72.8452 33.3833 72.8301 33.938 72.8301 34.5083 cv
72.8301 35.063 72.8452 35.6187 72.875 36.0679 cv
72.7852 36.2036 72.4102 36.2183 72.3052 36.0835 cv
72.23 35.7231 li
72.0801 35.0034 71.915 34.8833 71.1201 34.8833 cv
69.9653 34.8833 li
69.5601 34.8833 69.5454 34.9282 69.5454 35.3335 cv
69.5454 37.3579 li
69.5454 38.7534 69.6353 38.8735 70.3101 38.9634 cv
70.8652 39.0376 li
70.9702 39.1284 70.9702 39.4731 70.8652 39.563 cv
69.9351 39.5327 69.2002 39.5181 68.4805 39.5181 cv
67.7905 39.5181 67.0405 39.5327 66.1406 39.563 cv
66.0205 39.4731 66.0205 39.1284 66.1406 39.0376 cv
66.6353 38.9634 li
67.3105 38.8579 67.4004 38.7534 67.4004 37.3579 cv
67.4004 31.7788 li
67.4004 30.3833 67.3105 30.2485 66.6353 30.1431 cv
66.3354 30.0981 li
66.2002 30.0083 66.2002 29.6333 66.3652 29.5737 cv
67.0103 29.603 67.7603 29.6187 68.4805 29.6187 cv
71.6304 29.6187 li
72.5903 29.6187 73.4453 29.603 73.6553 29.5737 cv
73.6553 29.8286 73.6553 30.9087 73.6851 31.9136 cv
73.625 32.0786 73.2949 32.0933 73.1152 31.9731 cv
72.9502 31.3579 72.8301 30.9985 72.6802 30.8032 cv
72.4253 30.4888 71.9751 30.3081 71.2104 30.3081 cv
70.04 30.3081 li
69.5454 30.3081 69.5454 30.3384 69.5454 30.9233 cv
69.5454 33.6382 li
cp
f
81.335 39.7583 mo
79.9551 39.7583 79.1001 39.3677 78.7852 39.188 cv
78.5 38.8579 78.3052 37.7778 78.3052 36.7583 cv
78.4102 36.563 78.7549 36.5483 78.875 36.7134 cv
79.1748 37.688 80.1797 39.0679 81.4546 39.0679 cv
82.5649 39.0679 83.0747 38.3032 83.0747 37.5532 cv
83.0747 36.3384 81.9346 35.6187 81.0347 35.1685 cv
79.9551 34.6284 78.77 33.728 78.77 32.2437 cv
78.7549 30.5483 80.0747 29.3784 82.25 29.3784 cv
82.7446 29.3784 83.3599 29.438 83.9595 29.6187 cv
84.1548 29.6782 84.2896 29.7085 84.4697 29.7388 cv
84.5898 30.0688 84.7397 30.8784 84.7397 31.8833 cv
84.6646 32.063 84.2896 32.0786 84.1548 31.9282 cv
83.8999 31.1636 83.2549 30.0688 82.1748 30.0688 cv
81.1851 30.0688 80.645 30.7134 80.645 31.4634 cv
80.645 32.1538 81.2598 32.7837 82.0098 33.1733 cv
82.9995 33.6987 li
83.9297 34.1929 85.1147 35.063 85.1147 36.7134 cv
85.1147 38.5581 83.5996 39.7583 81.335 39.7583 cv
cp
f
90.5591 35.3335 mo
90.9048 35.3335 90.979 35.2886 90.8599 34.8979 cv
90.4692 33.6831 li
90.2603 33.0386 90.0649 32.4233 89.9302 32.1079 cv
89.7798 32.438 89.5396 33.0679 89.3149 33.7583 cv
88.9399 34.8833 li
88.8052 35.2886 88.8794 35.3335 89.2544 35.3335 cv
90.5591 35.3335 li
cp
88.9546 36.1284 mo
88.5942 36.1284 88.5493 36.1431 88.4595 36.4282 cv
87.9048 38.1685 li
87.8149 38.4683 87.7993 38.5884 87.7993 38.7085 cv
87.7993 38.7983 87.9204 38.8882 88.3403 38.9634 cv
88.7896 39.0376 li
88.8794 39.1431 88.9097 39.4878 88.7603 39.563 cv
88.2349 39.5327 87.6353 39.5327 87.0044 39.5181 cv
86.4946 39.5181 86.1499 39.563 85.46 39.563 cv
85.2949 39.4731 85.3101 39.1577 85.415 39.0376 cv
85.8198 38.9927 li
86.1797 38.9478 86.48 38.8276 86.7349 38.2427 cv
86.9897 37.6431 87.2603 36.9233 87.6646 35.8433 cv
89.0142 32.1831 li
89.3599 31.2388 89.645 30.7134 89.6001 30.2788 cv
90.3198 30.1138 90.8745 29.3784 90.9048 29.3784 cv
91.1001 29.3784 91.1899 29.4536 91.2495 29.6782 cv
91.3696 30.1138 91.5493 30.6685 91.9243 31.7329 cv
93.9644 37.6128 li
94.2798 38.5132 94.4146 38.8579 94.9692 38.9478 cv
95.5396 39.0376 li
95.6294 39.1128 95.6597 39.4731 95.5239 39.563 cv
94.8052 39.5327 93.9946 39.5181 93.2144 39.5181 cv
92.4653 39.5181 91.8794 39.5327 91.1899 39.563 cv
91.0249 39.4731 90.9946 39.1577 91.1597 39.0376 cv
91.6392 38.9634 li
91.9849 38.9028 92.0444 38.7983 92.0444 38.7085 cv
92.0444 38.603 91.9399 38.2427 91.7603 37.688 cv
91.354 36.3979 li
91.2798 36.1587 91.1597 36.1284 90.6353 36.1284 cv
88.9546 36.1284 li
cp
f
105.139 36.9683 mo
105.139 37.9429 105.139 38.8882 105.169 39.3833 cv
105.065 39.563 104.645 39.728 104.285 39.728 cv
104.27 39.728 103.774 38.9634 103.069 38.0933 cv
99.604 33.8032 li
98.7349 32.7388 98.2397 32.1079 97.9692 31.8833 cv
97.895 32.0337 97.895 32.2886 97.895 32.8433 cv
97.895 35.7534 li
97.895 36.9683 97.9546 38.0933 98.1196 38.4985 cv
98.2544 38.813 98.6001 38.9185 98.9897 38.978 cv
99.4097 39.0376 li
99.5298 39.1577 99.4995 39.4731 99.4097 39.563 cv
98.6001 39.5327 97.9995 39.5181 97.3999 39.5181 cv
96.8442 39.5181 96.2896 39.5327 95.7192 39.563 cv
95.6294 39.4731 95.6001 39.1577 95.7192 39.0376 cv
95.9751 38.9927 li
96.3794 38.9185 96.6802 38.813 96.7993 38.4985 cv
96.9653 38.0933 97.0103 36.9683 97.0103 35.7534 cv
97.0103 31.9438 li
97.0103 31.1187 96.9946 30.8784 96.9048 30.6685 cv
96.7847 30.4136 96.5747 30.2339 96.0493 30.1587 cv
95.6294 30.0981 li
95.5249 29.978 95.5396 29.6187 95.6899 29.5737 cv
96.395 29.603 97.145 29.6187 97.7603 29.6187 cv
98.27 29.6187 98.7046 29.603 99.02 29.5737 cv
99.1704 30.2485 100.145 31.3882 101.495 32.9937 cv
102.754 34.478 li
103.415 35.2583 103.85 35.7837 104.194 36.1284 cv
104.254 35.978 104.254 35.7231 104.254 35.4536 cv
104.254 33.3833 li
104.254 32.1685 104.194 31.0435 104.03 30.6382 cv
103.895 30.3237 103.565 30.2183 103.16 30.1587 cv
102.754 30.0981 li
102.635 29.978 102.665 29.6636 102.754 29.5737 cv
103.565 29.603 104.149 29.6187 104.764 29.6187 cv
105.319 29.6187 105.86 29.603 106.444 29.5737 cv
106.534 29.6636 106.565 29.978 106.444 30.0981 cv
106.174 30.1431 li
105.785 30.2036 105.5 30.3237 105.364 30.6382 cv
105.2 31.0435 105.139 32.1685 105.139 33.3833 cv
105.139 36.9683 li
cp
f
114.485 36.8032 mo
114.485 37.6284 114.514 38.1685 114.785 38.4829 cv
115.055 38.7827 115.49 38.9185 116.03 38.9185 cv
118.625 38.9185 119.509 36.6079 119.509 34.5679 cv
119.509 31.8687 118.084 30.2632 115.37 30.2632 cv
114.965 30.2632 114.68 30.3384 114.59 30.4585 cv
114.5 30.5786 114.485 30.8638 114.485 31.3286 cv
114.485 36.8032 li
cp
112.34 32.0483 mo
112.34 30.6235 112.31 30.3384 111.62 30.2632 cv
111.334 30.2339 li
111.185 30.1587 111.185 29.7231 111.365 29.7085 cv
112.625 29.6333 113.795 29.5737 115.385 29.5737 cv
116.615 29.5737 117.844 29.6938 118.879 30.0688 cv
120.844 30.7729 121.924 32.5435 121.924 34.4185 cv
121.924 36.4282 120.964 38.0483 119.24 38.9028 cv
118.219 39.4126 116.99 39.6079 115.445 39.6079 cv
114.74 39.6079 113.99 39.5181 113.45 39.5181 cv
112.73 39.5181 111.965 39.5327 111.11 39.563 cv
110.99 39.4731 110.99 39.1128 111.11 39.0376 cv
111.575 38.9634 li
112.25 38.8579 112.34 38.7378 112.34 37.3579 cv
112.34 32.0483 li
cp
f
126.604 37.3286 mo
126.604 38.7378 126.694 38.8433 127.384 38.9634 cv
127.804 39.0376 li
127.924 39.1284 127.909 39.4731 127.79 39.563 cv
126.979 39.5327 126.245 39.5181 125.54 39.5181 cv
124.819 39.5181 124.069 39.5327 123.259 39.563 cv
123.139 39.4731 123.139 39.1284 123.259 39.0376 cv
123.68 38.9634 li
124.37 38.8433 124.459 38.7378 124.459 37.3286 cv
124.459 31.8081 li
124.459 30.3989 124.37 30.2935 123.68 30.1733 cv
123.259 30.0981 li
123.139 30.0083 123.139 29.6636 123.259 29.5737 cv
124.069 29.603 124.819 29.6187 125.54 29.6187 cv
126.245 29.6187 126.995 29.603 127.804 29.5737 cv
127.924 29.6636 127.924 30.0083 127.804 30.0981 cv
127.384 30.1733 li
126.694 30.2935 126.604 30.3989 126.604 31.8081 cv
126.604 37.3286 li
cp
f
132.395 33.5181 mo
132.395 33.938 132.409 33.9683 132.815 33.9683 cv
133.849 33.9683 li
134.629 33.9683 134.809 33.8638 134.959 33.1431 cv
135.034 32.7681 li
135.139 32.6479 135.514 32.6479 135.589 32.7837 cv
135.559 33.2632 135.544 33.8032 135.544 34.3735 cv
135.544 34.9429 135.559 35.4829 135.589 35.9634 cv
135.514 36.0981 135.139 36.1128 135.034 35.978 cv
134.959 35.603 li
134.809 34.8833 134.629 34.7632 133.849 34.7632 cv
132.815 34.7632 li
132.409 34.7632 132.395 34.7778 132.395 35.228 cv
132.395 37.0132 li
132.395 37.7036 132.455 38.1831 132.634 38.438 cv
132.83 38.7085 133.114 38.8276 134.209 38.8276 cv
135.514 38.8276 136.024 38.7827 136.849 37.0884 cv
136.969 36.9233 137.344 36.9829 137.405 37.1636 cv
137.344 37.9429 136.985 39.1577 136.774 39.563 cv
135.979 39.5327 134.54 39.5181 133.309 39.5181 cv
131.36 39.5181 li
130.639 39.5181 129.905 39.5327 128.78 39.563 cv
128.66 39.4731 128.66 39.1128 128.78 39.0376 cv
129.485 38.9331 li
130.16 38.8276 130.25 38.7378 130.25 37.3579 cv
130.25 31.7632 li
130.25 30.3989 130.16 30.3081 129.485 30.1733 cv
129.11 30.0981 li
128.975 30.0083 128.99 29.6636 129.139 29.5737 cv
129.844 29.603 130.58 29.6187 131.299 29.6187 cv
134.479 29.6187 li
135.44 29.6187 136.294 29.603 136.489 29.5737 cv
136.504 29.813 136.61 30.8931 136.684 31.8979 cv
136.624 32.063 136.28 32.0933 136.129 31.9585 cv
135.964 31.4331 135.754 30.9839 135.559 30.7729 cv
135.274 30.4888 134.825 30.3081 134.089 30.3081 cv
132.889 30.3081 li
132.395 30.3081 132.395 30.3384 132.395 30.8931 cv
132.395 33.5181 li
cp
f
147.604 37.8228 mo
147.604 38.4526 147.633 38.7534 147.918 38.813 cv
147.979 38.8735 147.963 39.1284 147.874 39.1733 cv
147.619 39.2183 147.229 39.2632 146.824 39.3979 cv
146.299 39.563 145.008 39.7583 144.168 39.7583 cv
143.149 39.7583 142.279 39.6528 141.213 39.2329 cv
139.459 38.5278 138.259 36.8628 138.259 34.7036 cv
138.259 32.8286 139.099 31.1782 140.899 30.1733 cv
141.918 29.6187 143.133 29.3784 144.409 29.3784 cv
146.074 29.3784 146.899 29.7388 147.379 29.7388 cv
147.424 30.188 147.439 31.2388 147.588 32.1538 cv
147.529 32.3188 147.124 32.3335 147.019 32.1831 cv
146.539 30.7729 145.594 30.0688 144.199 30.0688 cv
141.814 30.0688 140.659 32.0483 140.659 34.4185 cv
140.659 36.563 141.394 37.8384 142.37 38.4985 cv
143.088 38.978 143.87 39.0679 144.424 39.0679 cv
145.279 39.0679 145.459 38.9028 145.459 37.9282 cv
145.459 36.9829 li
145.459 36.1733 145.369 36.0835 144.649 35.978 cv
143.989 35.8882 li
143.824 35.7983 143.824 35.4536 143.989 35.3628 cv
145.053 35.3931 145.79 35.4087 146.524 35.4087 cv
147.244 35.4087 147.979 35.3931 148.489 35.3628 cv
148.609 35.4536 148.609 35.7983 148.489 35.8882 cv
148.143 35.9478 li
147.694 36.0229 147.604 36.1733 147.604 36.9829 cv
147.604 37.8228 li
cp
f
154.729 30.0688 mo
152.883 30.0688 151.894 31.7935 151.894 34.2983 cv
151.894 36.1284 152.54 39.0679 154.984 39.0679 cv
156.949 39.0679 157.713 37.1479 157.713 34.7183 cv
157.713 32.1538 156.588 30.0688 154.729 30.0688 cv
cp
160.114 34.5229 mo
160.114 37.7935 157.924 39.7583 154.699 39.7583 cv
151.684 39.7583 149.495 37.7778 149.495 34.6431 cv
149.495 31.6733 151.713 29.3784 154.848 29.3784 cv
157.969 29.3784 160.114 31.478 160.114 34.5229 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.0%%For: (Cicia Lee) ()%%Title: (San Diego Club logo 2011 v1-o.eps)%%CreationDate: 3/16/11 10:28 AM%%Canvassize: 16383%AI9_DataStream%Gb",KM...-oC2JUIL"=['FHRABJ1e+k7_M2U]fE".s9h\EH,gH#DN3,Ikr"&Ug:/W6JD[&M%e3MV4#`dP1Fu,NR<.+lOR>\7W30G%4jU*b33N+7>7E`nZFBS$s"p;/gXO(o&_O>M\Xn?&!(eBL)S/Mb9DeeXCQ2*P([5m^3#S9adqNk[(epm:.sprE_/ZA;83<Tg7<_dT%h3rs]f/mloqh*bcq8God\IDgk#kj>@NR+NYQg*n;r0tJ4LSocM00L:s:Xe1<$b/=<$dl6Wq^A#[!8Zo,Wb\<VS53dm$\_1Fg0ssM%ZR:gg<A/Nqc0N`Zq<5eA<ZAQZlI7#]lG,&30"BkpC_=[m73Lq4T'=\c!;9!fCVMu+?hUD(8U&`-%=c!mW1Ame(Z!1`^^p8EIX9Nm%n`\]5oO9rHc;HY/^(]'!i)5*ok&8c_pa]PLf#"Bj0NV*skaIp+oQ<Csqf_Wug?k^MR[Eq^G1?OVi3Y"fj3TknGrd%CPNTj_$o(+G%68S4He4U#h'Dh^RT_hVqmiZuPSJjWV:0seROJpQ7Nca0]`]O=Hr'C'o3h]-_!M58!iNpoB'$Cgm%7:rg]kT+2C)FKP*qkR[lhWr-%8`RAR:0h@"fF@Qs_9<mNQopf/?hT8a'mA!prCOb:6jI<fVDh(3/[g*@rZOsdkh.L-.a12ERu^6-N`1:H6j#P5#OrjYqnOr<K78Bl%1#UI[8JnnIZS$k.0SDH3;f01<ThIQ;chHrm%.QJPn@dLcW:/bbhoDe3O&pb%Y')jN2r,4'fI@="'Bj=cn(9)u4!!`F8[(pP@%/E-%rPROF.S6iZre9gnWnG<kbpM<#CuU^l'AIUiGdZ!,6bL%[_<[X%h*W"m^4[#V86>=V^@(l`4ab:N8/&^I/#8"NV/&U6^1/+X#iCb^%jojLu1uUNF6Ak7QHQkXNcU\Y^,Mi,6Th#iW8_g-3Ynb]@n(=Md5o@oY@ST$4/eXN?SaIcG$%'O[E21emF.OUo63"/(dYI;D'?qXs%:"O'un2IdBqKRaO.s*GmL[Y!EWMB:0GJY=Cpl;J<5('82,UjnNdeGdGb5c"so##N<p^u,_(%I:Z6Bi/WLcOE_j&42c?ds]-@2l#&%,nm8q]8::6MY,jh[NbN:qM6M@0>:p8Uoq#DP0LR*S>-Ze\ljbj<`n&eF-76#"kF'Q;rTlI7pMs3M/S21cNquh\77$1SU.42krSbf%bXjT^RVC'(2q12brZh4rg.qBAp/kOYAhfp:m#uOtg`-(,]8[6(VOL_#/t7,ON0ofR\)@POb4tP;e1]YB\rQ]D^W@t:l5uCCq9Su9%J*=Q7TD;4].XOHH&G)Cj71jr+^Zf)Fe)r^QZ"*I1?Df=92uRMKkd1(Zs!iAt(.$/_qU]W6BChVl3VjiNF.>=>Vg5,br/#k)I@b,0%+:qj,nDOV$f+\"?T48HY%$(S0UGi(Rm$X11G9-Rf55TogBfRk+6/?EMYf\$]Zd;@g&Y2\Hp,Yt0[%,3i5!,<]CpsJil`0DaTa-E7%oPT)SJ,C0=Qi2]dIi,TZ8M'(DTKfS,3%jo%O0K/&XXBu/N")!p9od-lEML:><oDS>_@+EI5,1$PYSW[p(;YX7lm9KQkTAS'n\H$M%Jbpu\K6eP)!:G]t,(HO5`#2&5BR#@.A$89>dY#,1O7=:V)g`qR'AW)6YLDAg#FuW</dOtY!dE#)/LS[4.mML2;??uM6Ct4i--k!F%i"j^25sk<5HalO.93qu',j1XW'H-9&M8DNV&OVV!U\RH21GE=W#ojm5O`]*0/+a/E#s/@+;"f`jKK-CR8kb$jlRn\RM,g,/?M3Xi%M1O[BW\<&/jGtFS:tc1O``l=X1>R)3XG@OHTcWk.[&Bb>Lgm'(9Jjd'8PpaE/^gC]:U4h\G%/0!A\TI$JNi,MRFt-p?6_6_MUk1&%nYW'8%quMuXsAuY-a7jA>,cY9mZ=_Dgi!qsSpH<.:2(JGqq/@(#T:o<4QK1//>VXZ?'6;2\S.CI.3m[.EUd4oBKB,)3m(S5ko_Q$%)j9<2<\qgsi/I7)Go`J2r%W5tW#,#2Blc,oAK/LVB2r(D?gG8b!HO@*'M0D"2>iBQjZBgjjC^g8Kte3pFJG0VE7T%N7FRo6W&Y3]%AP+_^KWG8K)G;+!PEEGfe1m3EKIeiN;pcRqjkj!C&B:Co!SM.rAnI`849s"MeWlFg/11c\KaZ(j]L"_S(1]#(4b1NOeh[62VBOQ)%5,E/:C]c8\/^XX*aFlL5,Y,!VCOfBj(IfJt[F_\o[\_[$cH$S!)I%3'RH6qb)Q%HPCeLe@1L_H/kCDr@5Vit0N(oX$QQB:6?HL`J%4>pu1klWqrZH)P\V1k^JgN_;HTW\,KQ9LBBMRIHGqpVs-OVr:K`4f8UARBp2>8,D3B6^/L_u&bVAS6\I'(*TeN+$'Kc;T-!m?<5e%)si3=G-nV9G1JFj8C>cKR[uJ"J&t/Q/ReMrd@D9+TI$@8am3VF-3"Pe;4fM<-*/I`T#puR-qRQU*fm$CmP0goLj)MLVDU+EltOR.%W]TL)0l$pg<n'sYMK`g)banp9D%b,>4'"`^flE\a#nlB&rl=?/%b]]hIs;G=Iuk%SVp'O(C'sCu3m2J=*a%JnPI"J[Z+/-6_(gSQ%L-O+p2#*9GP%7coS-FBf1hTFD@eTfo7)BkB#GLPql#R(c^s'D0P7Ed85hT4!J?PbFrZ)Bl;/f8:`c4?s-r*3h72eVH.I1E$6#Il&%hq/=]4%=<ia/$YCXFk%crm]UGE`Rd%o*D.%P\K%mjO$L#nMA,`5elWHAY@llA,;.m7=3e1`0PQ:$6f4QelVdFD2tteLcK`^bU1s]%U##s0m]Ap(a;UeS97m#bZ*0>/K\PKWe;cAU,&J3S-`YdSic@n(M_.mZb*q/7o2#'.dCL)2]#gG7lpKW52g3>g=,\L<(M1phKGbk(%F%W`)R_a(3ak//1oPq6-GgP8%p@Hi'KQ-JBGh?4C9I<\6N)`nu.cEs`L,ri<NMff3SXN?.CIhLRlW@#'b=J.uHgtVNPg+L+Stf9>%R0VQ'esZ%cGT_1N@@BudRqt-n:pGlrQ17k;.d=i!9E$N<]u>9@cQ_'H,K[r4YpX#*O;Y%'7QR#58?4^Cn5s9IeF2`Dg>#'+<RN?Q%B"Dm>.@@@C4U"Iil^OER[YeKt4=:0KC(YNKicCla4I=],`HN>f='O?+CH0u_@u%!D5`m"2BsJXn'e#j8Cm*qMEFGt;M;VKlZr>L>%A36;9o$K5PMThS_cUX/%U`"S2I:g)X4@K1j>*"\3A7V[ARk69!B-$0($0D.A@ZVXrHfn!1CT,@MN-8\]YUt^"=6Z8[_u]Kj/72ZP%;#O4D,/'Z8FqhYsL\u]#4)n6%!I69#eEt>.>"Yh4OQVb0K`!"4(-4YOq6QtENHuaD`3Lb-H"&%Z`oh>5F1J<)o1Y9Y4^ec@j6QWH%76gH?OXI7m<%7C&TA&M<cLo86DK0=W2p1s-QF?P4?=,QJC8ku[/;l_tDokLAXO"k0XhK/2+26LV[e\_roaku1lXY)'A\XWg;_ctt%:AZt_2="FXl^U_Im]cUa[/)Up4HJfQY,fm+O7`7?RPBgLBs^tV@CbmV$A>LQ6Y>O3CJHp]qk;*)C"Iq#a4/_fEcBm#Dj>%3UM5T+%nuVn]"T.^5;c0hHN'3]DH\!NN,S'^Ar3_4G20D?g?f6Idd!;7Oq2"lGR@T(2e>)'^SA[sfg+g./-0Hk`7Cdm`]=RNCH(C:3fNLh5%9.T!QAn&hg*.uiUpd`UaXiY*cQq,L\)tbH=WFL=4ee4B8X(WV32YFu<Z96_TB8e9Am)O;c/Vp\a:;6/:EF%FA0LqD#Zh,1siO`?U%i#dm+M_ig;FU),[1uGB@YW_^*j"f4W.eJ[2jomWcXI.A90`LcL%K.F,I",)olPqn+l9p^bjh=`qdMf.IXap<A7IIL`l)M8<qd;5:%,McV@bMoH\fl@jR*t[nI>[,'l??oZ2^#[n!oIJcgbBV>Sh:NKK.p0[e]UaZ2A!NDAUjjif_^tP=DU$K2]At?_\;tWQ<^XD9]c$Q!%:A*pUagZPf[4l3`.]Xl(jC``kZ#;2R4\"'3QD_&<kE0ZG]t"=04,34D[]JD6/'iFJqDd@fa2r@N6a!2[qIj5W*]IT$/?WVs*BheB%IWnJ.GZ!%u5'0^0(Cp7>Bj3?u]ZB7[X$YULmm^!)],31TAU3_+=1F-a):R2HY2YE%rT0d0?KA!Q<>Bh6mE#8XEfogFhS`l.ZAOR!%H'*3+?k_sF`3jQ*Y%?sKSl\cio(4E;b46?j]eJl,IT.V<O\[`Ia@0e)MTmI-^I>G]:T`WF3*K.h2HRhrH82>'d6Q9D8ZUNL_Qh+T%Y*o^m,&S1Z)L9V"r0hr07Zk_ui*="8UA)]q;RDa/0^%O6UO-=Xc>jOX+r9Me=pN0m!q2`\bc??K]+n*Lm2tdra^NfCCPh\U;%[^K%B*i3<<?\^E(27,cnX;RiT#7jgh$VrV9VS*mq/TYki\`g8F05j%niFCCXCYG2g3oR!@Zg[Z:tdcl^#pmU>\PaNL7jXk"^YR,]\$P6%']rPYS%-W'H)De2OK2&@:rr/qDRV#4bfdPZSd_ft7:%YDmnKUJp_?1cRH+u4/$p'-2rc+JYe\6S+rBK&B,4BOP==p$/6'<=CH68i%o%_Yuo<VJ?Z0iaFdo]Z<P!!G1b*p;/AhbqofkI8&[d7GL.\ba0c.OU<\"pE1PfrQrg]D&eNb;iS4h-uPBC$ke=XNC.4dCe7ZKj2S%A`TkaDepFtKi$M2Q+^CJO0j[k8$.85C][e&`0dI]P$[RaLHRb55^tX](O-X)b"!!Q-_nNA-!euLb:?*ICd+`6'_:kcit8Zd&+PHC%jfuH2+!2!TE9[@41`nq%SrG5OlFkS:>(&<nSjKdKPES5[e(OEZ2$G[`*R4Jf[+=W*YHR;k1[%T^.U@^sj[]<`rpEg52O[m<gBlRT%^.np.Z.5t2FGIQpO57p&IFj7,m]\dP9"=<bT`5q5FFcrZDZeaedr[>c"2j1OZ:Sqa'b.6;)[t5eSQ?b_FP*)J^?K,CEIt=]n)tGr%_b@(iaaAD@I5VuQFLTpr\p"=D:i'L!0b3:S_^@f\d,ITr6%5X+A6-9=T_7jfi*r+$DfuA<rl[lWI,7(>)PH$"*f7%:,?Sk;:.Bm8%oYS\5"ZbpEB)U1EHLuAA9.s?=L>4cS%soFTd^g<47i,Yt9j'V?muC?"kNoi+>9<#=K4D.$[Z0,#?X\=N[5#$@hk,";I5'ur;/M)f%1e\%O]%8G90K_['D=f<m<5,McQY=PG_ZjWO8LNpoSZicL7)oO>ic`+m[bL1M]@h)/lg:Jg\"e-!%bdZE\%T6)`mrU_X4:sn)Qe<9%BuQ?<e-a#@MjE8k=tYO=c$$GDCc36WH8B9Tc);L<K;N>Y9s<e>+a%P,)m)T9d:h#K8L&+@NNa!O7)Nqf%Cb:qlCE75hPrO#NI"k_%Ce+0&*n3X7YBtE$%^B'_:0L4FBdE?s8`D!f_B_Z?i[8'l-4nqNmC3lij$m:7P;o_`;&mSA/7Lj;@Q0#q.r%SVW#7IeHB^g;'LcFE%6mD1H06/d`%GP;ACkdqR*[Y;87U[,<Ta:VD$f01/"J)2+5R8#[+M:C"3/E/?#Qb%0fF-I7U34j!O:I/&W/F'^+qgRTKFkleKI\%W%j1"uQht.k:h,!sYi^\I]#JT\Uht(.2nN("2CO&XXiRPW[MnR1>]tb;Qms1Mj3GulS].LMV2Vbm5\?R!`Tc:MYoj,md?)Q\t6pfN+%gie3VNng)]!+HH1mGJ#7HPNHiGMJR99[JX=YSoLl]HTV%.XT2rBOb4c%7I\J^n=DsV59[CD_o6&$3\sJ_2U4%gQo^7iemks,)ejI%@Z5ntU5ZsJif!s+b=,qX`>W+Sp9kZR&FbRAnV39LP]W/_\4rk\67MLSog287b!&E^^)X*S*N99\H*X=s?]>Dk"=aST"hm5+5rU!e%+/.0re.No^`L#<<8WCQQ,P@oYFf-ha#@8.E7STjS%B3*FWD`AGjXX64:qZr'''eSZQ\Vc%r8h*8a*om,oE+"H\e7)t.Nj#01]imh%"=8pkS*HYH9q\R.G7k.fblb']TR@ts@1:jl#H_f7qV+T>mXW#tTXUX:<'Z9bgc#Kg>mJnt!i+KB:'2aU[,(oP(LRD3jhMqU?l/,!%3)pVog2;!XIP0RH"%c$ifSh;CrWG4/O?@7YgOOjj8lme!#=]r]6^RkDMF:366ZTU=1C#]AF,;^<aVbj/R-Hq3I3_5^7A;C<"K/%A%-)ZB0-bN9Q:ps3?:tAJ*;"d]i;&3"UPDU&Mi[N,)#u4^<GS)$>&RI*SUC4`TZYuM753Qc);hu94\.5$DJt02VF?CK)J[,Y[q@JlU%"sZqL@t8XS!g5U9"(oCPF!8>8KGC^51"_ULfTRZO"u6H+H3[+'J]/4/Gs\`#0pn[rQm@o_(3$&o*&(D7(bGd.$d9][Yo(\f>r4#R%=tQ]nS\P8akCM`I2IHVSY_=fLSVC2JAuZ#LKY2<?E-bnWZ(D$?B`r$*#3/n-)%W2O:lr+rTE>rHcimV^_gtetl$si-kle(F#`"Xg%\T^Y$gW?`s$8.2g$SRAj$8@>k$?7>Pod*M#;4&;#O'5GWgN)R!.G-'&.,97Tj;TBbAK7NdjZJhV<U3Q:)c@\JinHH]+S@/W./>:g%./a5#!=F?,&64r1,]o,El2k]&l9ecJ%-[n0"mQ8+#3lD.#O2P/#jR5qP);(,/ZC4:.;Ye4Y#KUP.LiFQ.'3Ye:*T's6gIN@RN<$h%$JH_=QUm6dBsgL"6>=h<Tie-nWER^qP%(\28`csC3uVf*Z5(SaZ&P$MU:#q[N7CQMQB[84['P[638-(kJkd1V$]?nYXXr1/ZF":\%akDok-&]r)Q`Mgo?"J:3gA&+`n[6Up(gpp)D$s#qQn<9s#$4Xa(Q:&;@;U[o%;t9DE1mH<A.1/]?S]>iZFn?JqV()Ob2/;`,s2!H%"^0r2e>o]X'[L`s+YB!5%A096(L#cg^-_XYkAV`pIRQF/_NT"j00(+pmpB;A6qbZ+8k)0?7pU-IAH\h4jWp(rK$o8Ai`FX_E#/[J%MGArD2E<cl.7>RR-qK1/-5<@Kc=S2Q8e<?%!D[kC-&'3+LJF5Y:e?N_$<n\X-B]Ph8hlJkP+q,20ls,j\jcfCl(p;bb;G`&.q[mK%1ij82FnTjT`Q[(1AMkuK2J"-RWq]Xu:<RgdojmsA(=ZF5.ToV_7k;`HOte8(8d:PSW[AgbK3gjteWt<[%:rfYl$=RgA')lNMNh(9%)I$9<Bh+WI[WLb.Bm:TFe^pYHO/3/CU_sYR=<Q[_A0"(E6@tJaCe-c:6]8A]10PC#bJ9kr6]emdg\BcXOabCpW?U^i^P%(3f#u7M%gkD))?5<@TZ<('b+A8e)JUZC89)4XG(-,-g;oTPH."A<%el=r63M="7(r1Tj==N@SAh"HO%7F#%]c(REh*pjV\<f7#D&buD$QTfu%17#AaqZ/i5YV1bh:aK!3ZXg.SVu"OmEGJr<7+D`^!Zuo&Fg\6;m)cXRGec(r^8dIB(LQ#G@t+i8FU-Stdio2)fThnK_:OiJdj?B:%:!6E&/@]#;i-Hf]WmnEIK0)<-bR^!rFPA*!];4RR:24s+[p@s0=*WK=IS1&e]7l5;/o9ki5^*U/T>1Nl0:+)!][)2PHS"bnZK-+q%EnC1=\m<#M\27^QAhTBr`]7mJV1!EHiBK=aS#3OWd9lM5,b=L\3_8k/>`]d,6-Y6q=8n4#(XSd)i?E1=oN$G=(B44FJ:CWhohkCK%hjeFW_LHm3WY--=\*Bf9!2"9pB4-btjJ^s'q=bO+_6I@\LL/<bkGu.`eWu^?7mo>Qi*>g"jrq69BSdsZ.',VVP?7@loug2M#)X^S%-^$Xh2>!k:+MRH?TJsm0O_AuiWtu,)M43c+Ei>WH-VhaE!sA),RRfc>OmafP=a*K4T4]V!p4#qe@o<70BIr.(e>0Vb0uFf8$_j"X%&iJ;8@gtN(?m;cLThE)g]gXXPhBC@Gj9:Y=".W):hdM',l8X5ZZO1A-Z%lUS$.03Q4$gfH!s=)t_Dhi-4`t*Dbdqj]]NchGO3720%`$L`/"i?RY&fZpe0G,Ei!mh?H`Ydjh+<jk!M/.qi"@XHIo:VbcXGik#KV5=P=9gPi"a8N)4:O?U5baPI,g:Yn,/h'p8A]2Nc&F"5%`37F9^TCfZA;48UVZ:?m\>,EDHoI^:/asc^WA>YKga&kF0$'"rhlD#6r\E]Q!en%tnIh^"hH0c`DHrQRLmcYn^q9LS%2-A\4@\=2%q=fRHbF0kM[lGkHDo$Yu_-iMS`.3W,]n3]oA/TJsJSK(i,cogD@faZ^0fuj(';5'7!=(a_"fVOJKRt0\LpS38.>GF9!+anEX;"7R%P;RNP"q*[CI53IU@g-!jH3'&ZSoRMJC47-m39<>7Y]:_NNS&A2keM`$80(fV(;]?AN>0tWf8la*MBl5%L8=6FBcq7;[R4Hb"&BWp%^]FN[YohAPWZ)=2er:'c)bU:UL6GHT44suL[SC$%mr_C[0O-Y2:bJsYOT3@;Y99OhTE>:*F*M*K=Tl'L/[ANi&MBC)=u8VJ-3a/_%a!_sAi)\O(.@US\]R_)*0XeOtf"FL+qqdSFj[JAX4\%P(!GZQMaZLmd91I9q!813jirYTrDr,B,_+kt[0#?.+=95S]Y@5@%<?#Cc%6s,!M/.h:p%Nl*=YjO&o=goRVcRWjiS+5,I`PCpVGfOnpT!mR+Y!!j:],,1B%q]or<H0&-V`ObRoQOkQa[FXtn[+7PpE@9e[5dmY%.]1s.blZD0r<VBm[#BhF50/:<%N;XD/-5'3L(tC:FN=Jd/bgQ2@js.+%tA%b'?O])9GM[^Jl0N?+>A]T+jl5.J0;Q+ZVA\4%&R51%A]NK_"kgjAA*"@5fVK7[[Sc+b?JQH'<T2l\b*ccBZiMrHJe5(]9FK3c9.]!S#95T&6\t*%5AKN]T`frI7?6Xn6(d&!*Q0(A@%.HB%GV6JuKc1A/Kdns%7BG\^*C-._:E[Mr@R@j6%O2^K>B=(@%:n3q1!BZj":^_WORu0%!*K"_+mXhj8.u;;^c'>U`rT?4@`@1HnpCW5%?'g[rUJUWA@%S>!-\6$uJXK>"e0,!S6frY,-)LdcYBb^%:UL@$ptS0Z^r0g[J0/pKW*tfd2,-2J.PPCF-@fJSTGn5-^]An*#;X,i%%`0JhS3a[l'?+qrU2^<&[,X/=_Lr^:a$[Xm$&aCc#m2lE:,A=5gd*+c#%GBDJ-dH4#Qr?"OtY'(!qAA567#-AU9F^Xn5qXiM!+%%%"=-'.\0aQ4&:cqh'qsQdqiu,o?Gu\hE(^4iXNU?n$/LY^O;B<QJrD'"H>(u_M\_gELuJ\O*e>N/R0c.#rE')1&OqZ0Ynu[85U(I\%gk8@$N*h/Qq._nJW@gFPn2p:W[DZn^$7A[&qG,95]!WZ>Pr>[6K"tg]-nIb1oaub3c]Sut&HO$T%UAEE$C)k[=9q?b$d,OH"lCtd%_Uf0Y=EPd+:8j)dNta:dPa4B"I,/Y,*K@W6/WBj@0o^^t2M':1/"d]h$3@GU"9sdfcun,'<%'"%:Tte"e3HZ.R$eX^03SUP#d=cf%(;sM^#n*N&(1MG@F\HYn'*6L:#[,*Y-rOoW^gW7uEEBq8@N>iY%MGBC:$`Mp0nm[O6d6sN#hX;G$0sd,>t=..&hBr<CVVoZTnC^%%1BipZkRJkqUcL5u56+#8m]mgW1^OKA*5cXY+Mh4A#pUfAJV$m'VPLf"_B8o<Uc\'om;PAl'/0ihL`*7EM258X2%'ELGZo+:KI=i8%As^\3`IaXum'7<kAg0[7H;-qf!,1_p1l2@"agrZrKXud9nD^l%gmFH7m;4tk;]^D&A/Hf16;UOUQ7dVJTVBS1Cr$U+-pd865o<0+%!Ki*SgT@"ZVHHL3Rd?5p!FTC/7G0jqPC0Ir)P!`.!4rgnVb:G+!^5*N>hc<n:i.HHq<Vfp^S#V=ciP.:(`6f72mbCu(-"skNngbN%5<rgk]T6]PcmWu\h*L&qXRi)IZ7Xjdn[B,3)=eosO!6HGn$<9bB0IO?\M9'Y?n.@Q@/uK/qj&\,%\U-^@>.!7:Vb'!]'Y0E!X^=8%^USpCM\WW#)P$s6%^6@0@6bG]@e_g+*+?Chhag6g/h72#la"U;^\:&8.\#o5lQ766*$/hFL1#3bd#>2*7)6kUg--q97PLYiEh6<M%%s.3,Ke<dfC?pQnb^oeO\H@m;0jLVV*J!5cg8g'4Gn0n-h-t=?E#0KEU[b7l%=j</1EKSM\DJPE8f<'$R1KX4DTH9?>dA_W"D\j\%?hKeq!03hi6B$GW@+GHq_SF/P0tT(tMY6q@`6=VtjSOpPGD4(>7D<r<Ao9:5oN6$^q,IS$hp*6%%.rOM"2dBJ?prdA+r*+I@6\cW%'93Y5m"]L6Oas.G;_HF"F16_\#.^^)W5q@IprX_r8DnqVQuZ]m60PVF#ZPU@^r1F30Ed(t+P%JOp/JQq:)s>eFWJ:=OA/6<kD"p2%q%V&u@h*cp*7#W2OXLuaR-S7-Q,C.'Ol3i/0QRSR(un?U!"5XA"4/reoEKh@_PUX?LD8,0GUT3W#/L!KKaP(E+VHo\=)^\>^d,+u%$U%#)!nJeEFuDW[()Yf+1bR/&+9Gj""E=?,G9?u&+u]fAeJ=+0)Ctk0.3P!h`W-FKmXWGtG!,'e3iIeA^b>ra&g<XK*1R#]O'1uu%lP7cZ%1-$bLV5%9+edfo*5M'Ql9Gu75[bOGRC<aSKKN@2:`Tf^>Q=sBht\D0Js6RXVQYQ"j>#"k%Kr*8N7!(r.'W3oE_&,Y^drDW%P)r7'=NL5,T'eMd.3hao:5c5T9P2U@Q"C&SFL^CAXNa%]PQ_*m8YWG567)'`lWB,kD)W%SD.>HoE17ee#:^DmTGMPm*Ff`*fL#bk%!GDA`6,:tX(#6k?['8fA#f*.WPG2VB"SE4,!n]Vg3^+'&]&aE2Nt!keWL=S&qkP4!qGP]'UK`Xm/eHB,)AAQ1'VRK27ZRfl5XqLO%6ff-b"REo1LsXZm#T_h1/o;b6\p4?I8r=j^eEf"[QBdKXBQ1_LcV!L<DpX&Md8hOt"@b^VbH;2gR&`k(UqoJBV"2A.V\:L%CRgP5%l6+Y<&IQ!&"lOht_DY;'=o]7?j._>s1dA6ca@$bB!#S52i5$VZE8aX9@Vhk,5ff3^`kWs<Kqf#E>3?IZZ6VbQl^RbbFt"Tg)?P4g%nR@9l*e8^V&ei<%ck.7<OTSM-5dcRQhmV>DPSH+<W*&Qm<X9?3MQ#59kR*nMT4A^g5.?3(7Hb6Z:qK`ulN#t.,Kss@&-X,$9(lu_%-0TdgbRWOV!A/C)"mf+I'G3#b^TU+Ip&2Co=%+8^:B7'W(`8#8/+><oe:sN777c?WY8/at1'\.+#75_fEjYs2MXRmiqG^'%kU!_s%+E*rkYlr,h,uK*uJ0q^ed3o"tQ0\PR&D*olYk0?\/-6YLGtPS0<N$O]:=j>QM;UdcRmc$tUgocg-&VcAD4rLKm%soSC7k%5g8=-m%A8<A*9c*tm:LdIkB*eZA$U#4KYZG(B+MOd"*.]a&MYl1N#EcnZb=)qmp0AV*ATs5hLniNDjG6G/i\:[>^/3I6a`JNrW`Xm$+BL>F%%rsXi@)pl6(N9U&DF.4cU%Bk29Nd4'cTI#&n!I8lOLF.6JVAtC6`Ol4d#5F[(9'nh!d-IS>po@sFJ9?qkDJS-#u=;-:a@Em8EBQ3%bY\UIHe7epa(lO%eDi2q?>NX8!gQ^bd.97+$?_BDf_0j3>+0"cR=Kb'k*)k$!"9iR<<t:fj*j_`ac6CA#W\l?<2g7\dKN/*P.:\@%BBCHV.4G\4^IhI?-8EjS.Eq`7jFRM)Xobp`NjCb<`<A?jEFYPiL]je/(DNU2!d+YB6G#-5k5^Hh%X\?FD%\?X9N9jX5S49>X-S>?%f"OS[+H54t_q<O=eSE%`i'[_M#h77Q1n_D^f1BuqMB0Xh"!ed:O,^QHb5jRn\>IOBQ0<`<<(%I4"RbO'YodR8I"/)c8.rn#5cDB#%oSmT2T*'*SH4*ZSP=A=S-U;gA-gcis)kX0nNHLb0Z-\^EU_rZ1'#fe1%DZIh5:f_p!chj+Uf*9?!5O[Y.P&>\3rhu0+@1i0T\MW+%KUZIL"G]IZjmEfcRl[:+6i_PS-UNdA"(8u=<1N2t>Zd.sG-=eS\6E9M"#*.QJSW;>.PCiG(F_&A@:V)XE0r=7[Eqfh3KZ"0*3#Xp%l"i_BK)fNVjSBO-jmk08)Z_r&;8G'GT'-60k,Y[YoH=sr$(*]R"XXjKY_l5,=c<@]4k=NfX)SCZ3i3F%I??S+$F])?6H-c+"mlpN%<7*T0oI<s6bP'Ed8ifbV@War*-Ic!F"tF45,9J]H0_9Cn$_tcZJKa3\67mE_cuZa\Tp6"Z\q6jCg,)6m-l`^nVfhtOEA.`-iPeFG%J_<G,Ur2F*d%ni3Acf3\SJ>YPJD5CA!d\Tf,?jo;H.?\<fMqaj6m[cl$mJb7NeBKR&m^CB-9?r2]%:F4.&\F0kj8Zb/iYPi!A.MJ%+D8qcB`Y`H.,nQ#Xk`u;\LAKC!-_^`C[.(d7\F^;0>ee5@D_smT*dhA-)"X+%MF])Eab=r^h":Pg^9<M!`Z,[>Y>[UEjO&<64$/V%CDOHu3VEXq<)O;h=uo#VNs?fZHrYP@3rj5_E-T?YJ*?,S\<)Tq"LP*r9q`$sXKia49Q%m>Y`H1MShX5XK!pNE&OAfC,/hGdQhube%Bb!313P"c^nL;CU6*NY449iBGa:TUt!rsg/N%23-J2Y=\&A\FNes-4P@HM,Li!q_?%B2Uj3`&hIOO?Drb,A&Q*mU/cX<MM>MaFW!%!="dhKYeouYMTF](981b'>@btEg?^!bH7cg`Z5o@ok;5sJU)Oh-n,e0CIOqSoFY/k9E1l0O2E9V(b7OSE5)tFnsYuPC"P)B!NFU[%]KP>`(:dSJ\bpX+d_T@ZTVWFWd*]t;0NcHi*27tX%8!S.B.A`Hja%cEQciC20[N!@jJmQ_HRr8U[CF%<SrPCB`KeJ>FAXc'aU%NV%*)kJtETrB92,7!m&F&8AbWiOYI+Bp8<J?!8$\T!u6B'AQ^@`N&!K/)('Oa)TA_$G+,:pGI&,iN%e-^O>kk1k#ScR%YfLU)1*MWRk%>mj^8H7ks=9;g9*W#%Ta]l8P9`nHNQ!ZlMmZ-Y?K\5C+L;6?,b0T6ug8GIW><Yti^"/-3V0QEr.)[%)H<nS#a".t3`:]'era^G;7%Wd7P[kp<%-VJ_H.hhVk<\m6(5fjaIM%tHE1X9+dRZD6Tj1B@8POYG0gnfE^NGFfs3;,SF5,s_Y?2CpKLiSe7,.R&Nj0!0h,n0akV%=;p8%n\@`5ECZtYDlnT$fG3+[J>pY$DYJQ##n3Ps$*L3L:**'7=ZJaO?qZRCi'9S&Pg6<O+`>O1'NL[E,>aG4(1e'Do#AX>e[5r:%Qn<-#@_F1N2Ouc2KU;paSe;u\#sj4%\^NGs-9nVET'Be3&gW]mQnr`s8Jna?82tL=eoIO:ihCH0$#MN?`')bVp3*SkeH6YI/ZY[7%-);(g-oJ]37SI^'<0VBQ!oQUdjU3N@,%0UQLDM?Uf*=WX[0!tj#s]Ua_G"RY20h3JT8W8,9J&U@9GCfq@teX0k9*[7j:u!-PoKR7%,")6V04_X<<K`F4,RD!tcE+6K?/cTh_#Vsj*A>]HV[3TbEoht)JMmj)^p*tn10gH1*%QD;>>!qsV6tOleI)fj<mDcW_EP>M6Cln@%4l_&slRd9"\m`ppEK#8dj6P,'XdCSpls?o5`0G@='nlYOlQ(;cg5ZG(iThKh>/[]'QqIr]k]$j4bMa-g[f\=)K@ijBh='TsO>UO>%(#m;L.fm2`Q4Y!5.M!s:-"%Ro5mRQ_-m10t!<O=?mFYH8RB/u[_#i3Y6ohpdGL:E]C<@g-")Y$eerpBVhh\1sFW=T-'nTO8(>M4B%]Bj`H9l=XE]P8Z6U*Xp?6*KK]gJHtR"PD;e3]#C6E@>,CQU'iO[u./tT`osYHZVZ$-c0+@M^:h"!:8q5c$,T5M')#'$>&'R;S\\V%RNT=O\GH2X(,$nZ-R1:*72XS@\3[<!!1:7qKXA=lJ:a>Zg3+ZKChCpq*d6kTUQn:D!sK0$[a_ej?A!N=Ce,9neV.0o-N4Cd[\e5s%dmufDb=/nY4lY=0Fs*;V@?1`XTbO4hQkaW%kNP.!E'*ZE4ZEr?-!&Ni`fAaNadT%qal@&r\*,&+WpgbO?:<=XU(a(W0f40eR%V\^%%Mn:Q%B[B8JsJ&]"8%'68EbY#W;!2ZC7f*=",*L$Ant!Q&E+M1*!No9YIm"!_ha^!lKT7=?/p3DAL\&O86j1+T`+!Jo5p3:@?igt%g\AQf4;"TfKsW>;^ssI^/LT:naZEIu+(u%%^+Q&sTO)"[$R1_UgBd/bJS#_%s/7Uj@<&"[>#kq'b3D^ZC4B(pk`FG5C5W/\V:E*_%VLSb7Zh4\f0O#Anq%&%.[kLob-m6eIfQVSSbW[c<XV-=g"=5uQ:^8C2HM'I&-7bmoR`ZX34>TR%o0U,Z.LPE.Vj[aGpnEkMO]au)%\3=<?)K-BoDH^X;"LMq;On'f\j`O6#1lCotA4W39#jAhQ`PjHR?qOmZ/r=!A1!:^n8RYi28'Bto#Y]=h#>GhT&B(Hg7'$'<D4KZ]%H"9pkV:!j2"C/QZ6b]1nNFkf`!aT-pQV5#6InZoqZ!I!X,/%jCCduC0=qNm1.j@mS[["o_a(I.4]`g,_o_oi<<_2sp;3-FH=">8q%6b8]mWW4G6hC2muci>uidG-GF=USJUG9hFJMo2\S`mUL9O/rZuG^meLa>l5geEZ&ZfK?Se884a\E0k@Z<5)!0%Y0);hN(@q%DX[F%CXHCt_kp;LgU-XY%;`+i!]`"0C:5bd!]:$HVG#JX\6H:Zb#(&8J8rAo?5"':@8"GK^Z0uWT,@<@o,cdc/PsBq_STr(jJI##nrg?5%5#*,CqQ,mtp-=2Rc8/hS<l<RfD2Zo0E_:igTgNL1%2%su3AO`53`'3/LU(ln_0Sa0T)\q#/G(!0[@7JQ0Y:#I@%iR""!Fqof:2%*%liqhm.8Z:(!!`9FR'NZHY02SY@XZ$#]@D8+GWTg0=[b4)@LGH*Wn`0cRL[tJU[+!=*#m.*$q++_8l/#7\HC\1K?fQ0,%@3GKlFN1%@MeHWiBqcD/*?Zh%@;Z>22Hd'5_=m:$5g@c@?R#Tok>&LGbLoXL_Kn3mStJSYIb1CIO*6Ao'UZ=Z79:)Gmh0aI^"Lr3CS!-&&A:!%Xhi5L0g:VLb2Dc2>8Z99-m"?A<Q)%(?RG!HKX*%A$M6n9B]qLNYXFD"0S9_1:i5Vj)r^?j%'sFYgZgSH18e-fOS)ZBi`&B>XfGl'%f/GV8o6Ip4#=^d&oJ$>S$t[6;#!H6HPP/(&f$k`hYbsDN$=a`d+A4ZgKLBY^&9c9^BI>@<V2Jfr2a7D//s:`3jM@*9<^iEk+0Z8T%HWbc\I\L?6ZQ!.>"e_n*LKp;.5fVf9n9!lo_LJ0d/-1BVGq4(nE\nUYHsDOfpgEgSl4+GjCI_gW\FKt@AsrbT5;2ZZSckI]Z8Uus%4d$SL*Y+dd%W4RZ]t%LFH+^Qi5f6mhKs7kU]WaF'_Z^E#P7,&4LLh%)<We"pK]VEb_l("=Q[%"T+<Pf2-Fsm9%jt#Sg-gOhYD<U=%cPnRBUo1X*.NWV!c-q=8`Xo3X3da%a0$il_;))H?BoXddd\tLjWdV;U%(o-Q&aq3hJuotI?$bNEQ@)]_a4I.</75H!BK5_uf8J`s%$Iu1`Zj_'7iDZ>Y:[9b[#apO+?LUnTDkAqrlGZ%(]D<5@;cV5o4&10,6J\OS;RLA_-NW(jl`Q(J5k&?n_i(LSMHkNYDX],/VkUo^%@u1T1Z1+.f*d7u]Qb1eU1L*igR#c:PF^M:8)kl4]&(dd$<Y;#A7KCXoQZ*+m*&.Lp$.A"586hDj6cC]gf&\4[:P&I4D6Je<S>XY?%n#MESSt]6Q6/_\KI'1JeFisjjQD?$WeJ^UQA(<6q"bBic-_Ode_EAP^W:R!'\1]dX(qg6@io3]CF\'b9$QO^Ycq=&59JR0jN9cmK%$nuhh&?OThb$/#EAl?*Q70.q$`sB2T5RtS+*HVGY+$%('^id-h?6YUQD\A\]95P72FCO1W-4&nPe%#cc!m-$u)h5.63'p7SgGugb%Lo"E1!\E^RG:W89b$Ar8JYNaPHeR0YNoaAF3omG'eiQZG22h+TXfpaeU%WCQ*n"@V$lE+XFOVGW+VFD&J-,rjlK#@N2ZO+jf8G''%49>P;#ZV+A(Se04=^N79'^!dIo(]SDak<?WF`N;-W!05WUJ?-n*q"i\8?Q@ebO+"+UfrN*c6>5Vj`#JIZ)bA,q;g?H0T%(*>0U-T%&)F.c;>YBX4'-B\CuV==[B79C7$K`O_!\GPaH\sk6@>MX]HiG$4b\IDreC@Ugi)8Rdi4--_rT91:BH874++^H_T/EfZ%c.j&:q]S%YrVlLkbVLUT%ujV`;79KDpG@NFPMH"V)Hua\Jg*cp/Si2e6_?K6$s4]pT0LT_4sUG$W3Q=@_`M*+b<RP'nMss'W="C3WeDI71+GA%S#WV8@:[R^a@?@V$;k9n$Yp6rfiC4RV%t;'F#lnVS\Mm!Y(L-i)d^)'9ca"T=-q7VRs;4h?k:Jn]mX6PUr9J$1\M)S.g[\1TMm^[%dD2Y[[s`PeN\_eba8,esNV&Ofj%7LO[6nh!hkr9FC11?NDu9*Q1p6n*ek%DTGco=X!EcH,i.D6`*^WZ+i47tuZU]d5A-X_\ILrjc%<9Fi*kV*N1:[h9tpi*E4-`ji\cd=)"ne-Tn0bjJ`%%c24lW]K-G,pM?*q)J8LHQn6>+?3J;!f\&XFh>a*/fWC]r0Io>t=>nnar,q%-deij4DU_%PNW;(dg$9mW/A;9Lr'X2D+qA+_InP#<8OBZ_uYJo-&`nIIk]MrGTQVt*<:0_`]$eb*h>^&*dC^NmAMUS'$OdCK8s6A%?WQ\R4rQrYh=@XW(65.k`I(9Xl.J+&R.@a$MpL@ECQs^cb,O;TJ%.o)o?Iem3Y95,ME)85*QU?>8_FC7^t1*63^YQFlHg(4ECBSl%,0q_[Gb04PP+YX*g8jE&TIgh)!aXM%e^EUc6(!We1.cFFbn'K2P.]FG#pO0W+pR\8,YTSL;"'?4,C72a5bAlj44Ij?=)Ui7W$*kQ%NA6GrA<!NH!cqMue8NT$/d-pARF'>c1a7!I4k,1a88^rV?/l6(aZ0]qZr!Y4+[,2\K#&$Pa(Q_bCO_#82ONMcJB*!HHq1Bm0D'Ua%"r%h'A7b<uJKqk!2[Xe$-45"`O?C@dY83#.OFcaY,,+&.:nPReCHB+U`V\F+&SPq'3%7f';A_3M@e;9DX97\R]RE8?1."k!j]Z^@%Nu"U;R=Q//Kmq$7-r7MkNmEN4;i,ceYFL.O#.ogrjR=2m:[j7@?JKVp/k3B\ar.rsajbYm>WV-^e(u.^>82+q/%dXl<<>Jo@?BS!%R%lJ:`6ggb1ufpO_!FVS(]p`?HF$5Z4-U@=<'eTGb&:&Nis$qbIHRh4@OKJ3EeRZM\-iHM&q,ug%Xib!cobJt<X91m4&N]gNde36%5V^cB!jcT"k;_ul"F:TIg:W7r\)8[96W')rH50?3LK8[\D\3"-8"OXiX-8,1"bRKelj,_SE5:D!.sLQfKAoXfmcX4Q^\4muH*6&:%4<MpmkgIihpH/<SFAo`Hs/b([h"p9__;eBGKg2c38`9:,XeQd+nZmK.c,F&rfCn_D+"2BIHF$LsolYI4Q^?OnXbXesp>YH+=C/U>%T1lh7o7Npdk*)#)+<@&Ns2*-,bk9HVrh)2AL[oblIlcnVL>>EB5O.4Yo3qY5+KNl$2R<]mEJ)9`HZ'a*NBgMkrKI%.SROCbTR4&E%)U:"-SBe^LZ-c%JH)2_,7R'Pu8U$VH-L"lYR"i'hdY?FhWQ<6pOem"Xld&>PTCiF.ceWP^,k!/sN>XLW'Md*@Hna;Akt4A]@t/Q"%X.)*gfGn1U8(7I=PU<V!>bh8ZSICAOboAS[&p#mu:JTC9POA4YIp+V-njJJWl(gB[9f=86*=r-\H49L_P\+^Y4\tr.cSm^-Y2el6%MD'p:G-:l5pL\2WH$MtZaCcsUfMRunQ3Gn<k/4"Tc%:f=X`6_[l48sAKCO6]fI[gaM"o5HS-C[;D&P!c:B!p_B8t;dfRlYQd@*Z*%QRU/*ZdN%6C8GRn41f=tT??lQ-='/.#*2:Qksq-0M,KK.^@T$Y=fku@[nHHfA-7&?hCdX=V0i4C?Zt[?WRIYK]%9(t='2t*pI_(G%h=&XedscMn(sN#>_70+Tdoil>^@$48l3E^qAI5k7A:6d#<$'1UA:9;Z:7A:_O[[[Q(<HW+@<NNRB.Ncr8MV2+R?Wt3CDN+fhPTgD%\I;\\+l;L$)K:t#O>gAnr6[JeSI`;q"&&q"qg[F9+--38fmubl8nW9)($C"dL)d*jU@?GW`-tN@;AQQos4`bPYB87aJ+(,bZ'B*p%K#0a?YA(]AMso=P:6h5aNeZ"cGIVYGW)R:Z&s4DZ4uqr#VFRQ?_57TEjk:*/-(oJegMb*,@Cl7CQHT+U;NY;eHFr_&%91EQIl\L,%-Fa"=V_s2A&PL&i4KBbMXeFWo&ZE?fp:IL3Q#WBZfi=]+eJJ_kZbp[1S_*_RX?ej(B=B?q5[&B[T:K>bZ]`^IgBF(X=8iFBTHi/N%6IqC!bdq5n#S@GtXPn8($#paeg!mTu9XMGaIHRAIo((]-Rg#SHa"hu-N?(;VQS5dR:&6h]UQi%4#'4e;1&g]+;5.Tj<SkWbW3VP-%WBF,U?HK-kpEbg);=\W%U)N:^FDu?Ym>_)tj^FMeDp-M&d:@Vg)N8":/Ye6X.`F&B7I6f+:ihI]\CVgE93*BHQ39jEo\iBui^V0a%\(@6j\jt5OQ0[rRN;RjMpW$dpb&uq.P%Lh,R^+_]AXBls1&GYXUn3f$@__9$Ro0j)BZW0apMs!OU;Ci]V09Ua>>a9qWTUnBqZ$2P%]U.+Djk@$5^/+']b?s[4lYk`hb;FF/orfZ_9:'V%jdMODQ--aDCA"Lb62*4L8;FNAh/O<\drp&CAoC%.oOQE^o!4,(-2.@d6on[-%)-[NLVd&Lb0,H4hU<Vq@RciMc0HD.0KCj9WqT[Je;79"`DV=U:Locr#a@.;]glXW79ceGNd@2mPU+MP($RVT1F&S;ED<G*GQ%<:#%">,u!]8Sg$f=WZG,Dj45=e&FP=*<It2tL[]W+HsWZ?Q?>,<bD0]>OV:\"$\&ch`:1`jMa%rP*AQTa:N!1HXnt2W!^Qpq-EHNOo&b%[[%3?dadaXqQp1e9qC8hQ)SAp-o3.0P]JUkp`R%$'B3/(+K.JP2!Sp=:P8X#m?VO/Y+Zt>#/r6+g!m?m9;`Kh\`JoqS"`WN\m3`U%`,jL\gH:c]Dg(>Yj+g2(gNFc69TIQMe+pt1rGDY:<';e#)71g5dP`%mO=M]7pA9:O`B-3@XB`KurB9,@>a'Th<3Tm>e0S#/Em;eY%Wt?GqAsh%fWVp]j9IZn$17M_3;GjaS%.eIVL+1g9I<OLJ\D%M2VS$1"ig9;AATLP3E3\MnQVW&lb\=Ug\LtK7VJP77M<uu=Oj9:d%`\+_@VHe]FDEH'[43VS(bWdjAQei3n>-=maAOFh-)=^A0UN4W&qq_hCm^C%2<sETPrhFV;>a:Mrg:i_QN(_g;Em;eYl1aVNHLLhU%\$F9Wn6P2UK:dk'Xh]CSZV\XhO^*>gb5:#>o#X,@cn-,,Q[>00fd>nq?dMb)6Jh*<L<\+Zcm[f>o\K8SmN1*Wn$q;:pi6<Ud"B0C%HCe0J8q7jE9l#(^hSafNj:i]&M^,jSd-`I=cD#/cdDAeD<!J7]/ro9Lg<QGk1DVR5N7OPDr"'<@\H7roe=a3hL3F6`cCXFifnX@h%aq]r$^n-gL+Wm^IqZqD/P\Z=HIOE6eTJ-!Y+.%mI41-Msg-hbMN3]EW\[_6>Wm/TS,csXa0j=;oVqmQDhF!+paZW42X6n2Me\1!'%<B#GPV[>Y4i,AC=#;/tK7BY>&I#04f9um%1X]!QSHd^Js9U:X-p[kC9EgBMQWTNV/>ORiiV9dfrPFcr1Xc90_5O>4ZrF*HObB=X=%TDI6%EWt(`n(D&Zqr7<Fk0$jcIgfH4VJ,:J+O/<QGVnfS1TfC!W"`2$AA72lP,QX&cXJ<o@`p(3V5/45F4lhRFeo%mb=8,:5q(@T%d._#^b32DMnX,WJRdWo(L$ka$424=!,r=E$QBbgZg$)A^,M.`pNfZ,6<MkXO/jdJX+_s&C<^PRF68g]?,nhkK9-:`,?%%RYeYVrm%jZHh[d9>U>s%PO6*-C'ZQ].c5g*sR$;V0KRc#`oUC/?MjDc*`C:4A8DEjqRO>>G1L.!mVjajN*+K!ORp.A*/W02'Bu05K8n+n(_Y%G>$#h-03kpnio5k]-ZMaoTZiS]g1#DZ\7-!T:O6)klEsq$BX/AELJbs1iAZ"I8FY5gN5+drI*kj,Ya&<^bVa1+EZk_*8Pnr*t?ZO%SOqPI1R`E@0?Zf]0#.9oo"0tSgNWtGGOD*_2\D:3_Hi?!BdS,-5'Y6/lp*_GZuj,a3e.gNaRI&ePp@sRF"6j4rJUL6cW6%K7@(sm%I36#T.dcV#7T(_]>kYd<9:%!>HcfR4kpcB_X81fbK)DAq^=0)eO!N$a:fKm;L:2,>*6@'1-#K,R.[TppMSqUt\WE5$W&Ybg2uQ$;%iW9Qn"Xln$oFqA9afb'=X#o_6:*4Z88QD1Wm\G_:ZM_)1472<.]=QIomZaVl=*NBKSc5CDm$hUtKD"-uo:P3U]-:F$=%$90Q)Vp0%b'"ipj"I2_kI41Rb9b,c<*[#Kk'f8n2Q"4eAdkBRk&XW[$5]Xc&%+;dk"8)'@\IXsE96+?0)qWuqbR$lHs,WIpC*%BbU<nrZbp[1%Sbr9!/4(f;+"q%3b5?d_9A5#Zp":5E$Is@Hc7%GqkTugk;6h(mp=U<*TC4=tA6mc3Q8eG`G6_<o-th^)57C2uo:9G;AG=lYJ(S[g%N6e%EVmlXRSiO2Jqu61ed+pLUQLAK>h6U?Mk\!Y=Pg<)QQ[8+lSZoCl=N5KF/Yeg`B4o]#P^A%kP-9un"7<lLm?MTn55oC7]ses/%;QfK$7'q#gX9h,69$!K-HLn>:2^Ppk><@Cs@ogadEq_jHSk%u"hWXFaPE,[tXE0_sPoqq7f9b:];R9YD[S+mEF(m.qp08e!Mb?L[%,uV(4&[G'SG,a.I2;=s>Rksb#?%:_YXL%fL?E&1lfOndkms]3H6\M1E,Uqf\'Q*,:pYDKIe1>jq9c\$6.!`-1\8>*m.+_YWY,G4o%U;jP8jCCGFLSt/qFLHN[dQ]+B]B:CjS#m4aq+,.^dD`!;.r46-'hkQ=an^0'HF3K8Jj.Im"J'Y4BkNV.2$YM7-@FT3,3Z_'\+C7u%ZdHdYUKh/BK8A\Rf-g:!UTL:+6?XU9S5$SmZgQcAW*cjZXh%#\Y2T<<$"3XVj1VB;HbP>rJ!RAl/7rUEI#`q4J^[bOG'a.h5M15K%L8,u=:T8$OOE$-=aO>0@jd03n3\B%)M1rpBNM"!eZ?b."MmZ0*'_^")!))!5lVi6"b4];V;6b8p/_d8X?)_sJC;#kFhBIrHfn>S[%5i,-H;6G<_mlQ;DG"KW-RREgsQ&78Z7dNImZHUF%6IsQkfIgk9BD0n9-/47H*qn0LNMK57XXP,>n%?!(A9>K=^)@Zl+0Tthcn=;3%-%$eK_Y8&R)jTa=oD;;Yb!k,=j4e-m-*i*6N3?d1lnZ:\`qMc^[*/6e8&qG^^2d5sG8XcP1VSq>&J=-I+*N^$=;d`spGhG"D9scg%,]14`C\PW&%mY?]-YDhM1*[RE&lGtH\*T]fp`C0TmGg8hK@+@<ls+ui<k^4A?XgN'hS<AWJeiKW3d\L/pU?`fR*jN%hEDg!:LDqW%&nj,iT(Zf8DjRSrXbck!$DO.Z<3U)Y\)cUUC3t:&%*(kCqL'aG5*ZZNBU3S2[S;<VoPL$%l<BMQopSRT0>Cik5S_L9B6#qs#l-X5%,s,26i9o%pi3:H>8BZ-hdm?8l=82ak(\>n<-iA"MN]$P!HQ?k%GbL)RX1Kl&P^7W_nqm2'XF$BWSTZqe/'=]H=TXIQf\=bRY/@ae%r3N1.PlKXu+SO=7rI&"\#<CkeaOPo6Kpnd1N&a)C3F&4cX(^rmIJrIagj:^5?E#2[([^Ua^!3=cZ@3DX`ujh+k<EW=Zq/+_'F-D`%m5O(Q0\q*\b@OurWVAkJ_G>20i'XjFTCU:rZHh"@]F+.")?p,koMWrVAM$4t$Y>[/"s;:M_(G%?GLE+S?_h7[>19e-_,kEt(n7)i%V'6/lc4R?oT12ri&IX8nabi]Z4X&N>68l5h-(>Kbk<$jD+.)Ykjc)C[h1(`2U3<^2__BS%f3(!uhVE=?9XM6NS\$Oh/9jFqa0Jk?%?"DoHT9U%9k0'sPD)%Nl-P?=+PIgVqMflu**^9Jie+gWu7J*[O:OIUEB;RlpB.Zmc4R,8.2]oPX^L/8.1E/cKI4OEi%u<p2Dc?G8%FJkoM@Bo)@&_P_:<upr`qFa1J75>OdQ,VB=W8o&p]^P)N-)F<bGL!\o0g4OV8\#3GQ^"r,d^A;C2L[X*I_#$K90=5)^Ke3olc3L_%4DTsJ$0o[>Z99,uZKmMs2fG$cIOo,\Z.mFqYm/p"ahEZ+]nP1KnLN3Oqb'CCV7#UW;!GQaZNST$h;S"m5Bt+ZB0JG+>"26CU<5C[%Ss7H''G]:HQ9T1a^@A5b>!U2+Yh]E55g&N`Uo]eY<f<tQ[9RfZ9$S>:3@h"t\KA%9qrcGXT>:>JqNGsEr$;HQ18f/bCd!G$eK9aK%D0N.fS>Uhm]bjXNbHS%&m.QfQE]7KbNR@XWe+h4C>0_)80IRZ;2Z1G!XZ<`D[m($Bqc]TcnEj"_,O&+`rj;-[N1+tirhn1Ano!=b%p#B`8HTC>Vbi/!(rlHus?iRK7J*8r6m9re?%2=BqKH*2t%1e"6q-]M:!]SPorLnY5nou__&9R1#mD[1\!$X+bN;gOtEN40Vq<@@j%>eZ`nPDW:s,M,LTeYr_D0Dnr?#CBH*]>T/E$Qm*:5Q1f4hc3O%<;ko;VqT%[SlYQ;=sSJSXLbe^(.hWA0VG?[L4LSL#8PRc`Gc\!%EL\`V6NH@Oqkfd4EGkj;H])8I.$)D7jfGb3$r]10bgtY@[=,sps&k6.B[fgRk8-oa1VN"XG7;r?>^9XIWn4CTJ,1nk=(0E+;o!n_%&10B-%.QVLPM%`<=F8*)@[!]D;:F2dNb]OoeQ\$\BTVUtLujNko6uar7UaA?);1]dIi#qXl,qsm%e!2hDLqHP7OMoX0pth`X,jj0%m`T]MI5:&`PO#9Q<U!u!3uITs;HBYu4p05N<J0R]<i^BJh:XC1'R9Ib#h5G5]Be#Gau.YXH/>*^Nk0jIf;gdG'M-F*q4?hVJi:te%n@jo%/-C-jU*T<EHMq&Mg)RFqA8Y\n-%oLQk<h(n4k0b*=2h9k^JNI!<T+Bn2:'tuMP&r\&GVlj/>4RZ`=[Rh`3aRN]A_uBU&9EN%Tg"^!\;pZ;1qZ?WMt%qOX(]6Jf30H)X1<6Cg0ssMZR:gg<A/Nqc0G@YZ`tgoG!GXL\)d'/0ZEl-q6ChXaf!cq37YhL][f'uP*I6\%7f#dUE%_").Q-FgDt-2:DQ+s<$i?V^m=TFhLPn;8c+9gV[cjF4Sb>kHgF&atl/q_eo"s>,7,=7%GX2+=p,"oQJXZ>oXN5"2"4a7G%G+Cb5*Q`9Bk%^`=c0C(T+q-!"iikM4'i<I$%=@^GC_NQ0?7nH43BWC/>MQoLS(d?rT;M#-l0q9*U*L_qYkUeDol5\d?=^R8A[q/L%6["[8Bh_(W.]\-4SBPd$OP86rr@t5ZR1!]!.cn4,l0Hp,rbO`M\7BS7)"po8K,?N7p1<V<XGOH5lY5&n<7S<,6)89-)CX8(F<Ye6%^gTd;4*bC=6VaPC;uF:Hhf_2Pr*Stfe@\$l@">mLo\ij[E<o#ppusQ?1HcaLgqgc0N!+THd#uL#r\HcmNBoVl]dH[j,s0jbmgY!5%rhVGODRJAtVfTdb\P<&,T\]EOp=i2@@;F*9$6OusDIWq1/o_HNNIftC:2I$[4R<PU#jETILF9B?HsQWg%L.F#RJCQ#a[7S6V\Ul9%I[#nS1dDk.%K*@X"`u&=!,OiFnQkg%g=)$upks5J^`3A-\[bB--Rg<)I)W@n1uEKPJt'<t^bgt)[kBjq#]Viid^>M_i8kk,O$pU*%(Eee,\rK^;E>O5+n).!]<jmkfe^n(<.W"Y7/qC[JCKe^01=I_=SRl"/RR#OO^a;%@h8Ts@"p@bG^mZKX5K&Ob+o3+&DWFq/^$@\Y%8S5V=@(-H"gI.H!;,GmN0s8Xo@%PBV;r*U^.QQcEIarg\S4G[ubP]T:l;r0(aQ>uDLNR>u[u27J?.]U]WgnN.G:/k'Ii!pG>"MWQ%Cme<V;rHjoOj6Hf^l,gUeIGf0!PMY'8DH=DkllfHf0[bRATlA#2M"fZ`[;Am"#D%5l-0b*q&g(t.Wi9F/"2W+0;AkFX-XF0J>j8e%oPe1K>7/!=;"I[c9U'Atp*p+b4"t+nImT'OJQAJkZ$@1*_iV*q`eZu1)^F_oK<A%1/Tc\aW]@(ULhrAl'VZ"+I7>BgnF\XGE<]bk%Sb0e]6Q!%"qf_!jc'N,])(c4Ic'Hd!bMS%aOiAN<VMu5p]rrIKLM:r67^q.<K;leqH#2-hW]@fV<Z<\X()i0)_&]O7p(E@+m.`#7%L)=BXNYh.dNi'9CRbhXiY4$W*%d[;7OKT`(2=F;gBiPmFY%RU*f.U1F^K&<IDe3\taspOG&9bqTEPe,rnP-'je/XEbZ?K*SeO-/,%A`Xhf\$d,U`sN-ABN5,$lObi%RXcu<!_-Ab&XX+`2"E+\C\\FA0snM]eem+2`7>csFu%Vc`q'>qG1*>,L(9\43ngHODu]p%*=1pu%I3C_:/`3P+lI\O*m,n?4b%e*Q7MhC%U6';Q:?NE9Z*!GqM^:gk/?=W:En*UZ:;1q"mIQoa];GG>GJ%MkGjdUp;$rY4:+D"]0t9be%h&[\fGm%/"6E`Z4Fa)9SK'6&]<t#"K,lVj)r_5!r=W1EWgSJ[,Gj4?7/[qW`9\`GjroK!mR%u:QGgC[mY?`/DO&+rfg$%G@P/\9_%X&c.tJSAL1(8jN+\G^_0nj!\_AL.h#\@IGU^7uAN7]3H<F\B!dDE&OegTpDmZA>b=d)YPWeF9^g?la)3ICTXLQB+5!MLSM2[]fpH%<gF2_PbieSp@j(!!N1SLkss_3,U'N>:@;gE,u%O,p"$7qGe0Rjqcq,nM6NIt>Burfn(*7aPMWg7-gC#%EqZ7V#tmb5gVTn""&e,<%-lFIPMF]`Fboe8o8C(mD-N09OK@Us/j5mG,:pihZ8K9;VUCZ.p^-=":SrgF=%Ri>Jk,-T>/R7]aqi7FZ]lCfQgY('soVX^;SrQ=I%>cWeNoTe]8gSSu"f@*:@+'._!fr4bS4.W43rr8ss$\Q5R]<.62G;;5tFXOl&r(aSu>C@r%[5MfIU?*]jKGQ:[l;]2O7k<bq>&n>T%fc@fp:6.6#NnG!+<d"?GK%9\,HI*\HS9J>;e\fdZ50h;$N]k8nj5]P1+86*&oR#,fh(S4=9<.%?31[k(Mtt0BhBjV*(lF<Eb\,u3%9X@SSX?K@VUVYa@Z^+OEr#jJcUNCgrVJgh)Rp0H$X7i5eGF$)cUb]Vcg%a)/178`9nT$BoQ<jCL;;1?^0<>2(>MLN.1]b,*CR,H]%GDD@r$c46C==XWBGcbh0Z4O)h2TptNF#"Zc-Y\o*+"]t&q)sd]m]58;ItjoK`>Z.S[DPjk3.%)(SrK>)?,oe5g**&=K7;o^O)C,P%(*\OL\ktA73Zk.2gF5,4..K4`hTa`.LJoNd'mUnU5*7,XYl6K&VcJ:.*d$:';B%_LHcVaLVWEPqZ66&mniEm:9Adsnm9Y:n4m<LR%1Y(+c4]eRZ%at`5$OBMHI8IgkoS3+br;0e77SB1n#,BSA@E_BG[AKnOp7%JY^2C0VAMY>8RZK\2L0h*kcNb]A`mO:,'aHC1/5^gN%m[e/7`,=SOS-h2>ogQA4%_BRMfk;p@0ssU>Y2H#4b?>ZFA\01,MT'n3NbGJ3#+_Tt5=Ge0glEWj&NSDHV#Sd^p8@)HCt<">&o&u"%GrY/eDiW8pdBL)+^EpGp$l@)9r1Tb^%2dN[NM!(P1/gtf6\^6EOK2tgU1l%`(_IV1k<2lc%#:Qp:WoV?mIVdTfp4H5VCiDtLXB_^%+T#7b%bgV9eMHT;^m>N,_mDH,,GaI@WSYhD45JAm5(#@E)pYGQrP@]n4*[3SkC]c$EgNhk,ZS^cP@b?u-!eE"c(V7We$E2%f5cKh%P7H=g3S")DERrE$MG_ad<"c`P/ll+?olNk7TiTiS'BP&nNg;[5fr:eN/"(0(ic6b=[cF7"%bh?fe`Lp5[q3/[]A4bgHTLAO+_\]'%S2Uuj^'&FSJUV.#J$AC/aM;cp2%0]j&]gq+6,JM8<'5n4bP1T\b";7KI@UjKUVeQ<Q.q33-?>=4-Dnf(FPbSRF+]o[ZVQ^rW^#jo%#6Tu1It4\PG.>+%_(eFuUY"a@N!mVReY7R!MR)J3^4eR<JlBENn+=OOjP?6RpF%%Ekg"]4kU;uaCe_%9Bh?L#d:mfT0q-qLDX\(d%/9+YOc?bi%h^jd.h6M3uk0VFm<6\u!i47Tt7qTM,GM#ji8M26m`Kfkb%-H+O,cD/V:pV#G2L_A'n!UW?ma=!`[W!iWCSFEYPtF3I%<GG*KP=]PoLD@@Y8NJ!nLNNAa:(/q8+uR3M4F$QfnkKD1H/<*m/oTI(iUW9Dq+YP+A9Xom;JsZYQXR>h?o>,^?9T>HQ*9n:dUoMW%N,0Wcf+q;q>Gc(Tld*sMNDmniGPEpPg%hKXM=+ce\)^4Z^,b8MK*B;eD_qLT4IN&kGoge`kgNW3nHhnWX3Ha%<eg,PmI2*aU%s^D%l&a<MN_UW*cULoEHF>EBfV01L)\2a`dK/"%Zh/??UcG6,)lQNglJr\#NF3Gpa6?$Ph99PU^1o^1QDYO;?Y010Xs'I&lEKO,o@d'D%qI=gQ\c\\SX8[G4kf5'+^L"+X/pMuk_N:P!ra:G=6CWm1Ddh&:D?=iBXjJ2Jl^MRDCu66C8&ef\>V.dA?Th\g("@1d4C-D]Q)?Tg%gXN+e52M66VU/U*#W*BXHh0*(VX&Of*A*lkBRhhol3=",*jhW6CZSZuV9*\PlR6NDEg"lc;d[hXSE*mhc]W(2M)>YE?qf%aHLdaA%f_K>F9DS0Rcb!Qse(+C+>]^5,fuce"]:%GOZEh^Y.eI3$QYSNR?Zo.$EClph5$Asqi"Et&87'fffl0u]c;1;f#fA"&_0BuYdO).g%b,C`5$=P*i?XCCF?$%HtVPCK()Qd%WgjESr@N2\GNQ)pH*C/t^b;L.TK:,8WH)rr<DIL4ECQ7ukD)59Ic98V$`TiZTA<h+D]8:[-%Bh_Ouk'caOlUIIJPS?'=KW$eR*+0Z#^%;`n6u+B&=bq.IT3ZQZH#'b+n]3HCmMVU?h#%Y&D8o:&-$.4!l;k:6\=pd=5FqF](nM5K%j4`f.gTBBL2Oj@EH3L4na[;Q^l03/PEM,5M_'rG/MTm\0K7&f$?eb!r*K?8LlhLNtc?86N&GNG5jB,,"aPW@\S1\_;RUA=e7Ya_D%PF>6&:?97,Q#52qO%9",7)#KP]c6#VX.pFDh+pV=2J?hoN(*99DKhgu;Q]5gQVRE2L[-o[*`$NkeTI,o@&*=U<@(o,m-i2fg&%"7%FCqW)[8qSXp8_7XH!>,[^o%u2OtU;Wi-$n@;;`0m7VL;d!*bu`7mS>"2n$A])m=.Z?.$6<`Xh;K`Pn]4f5P;B8Mc9A74&>1oOu'\%Kgg\b>9k9=fg%D:O*f'*`b&t!h/7k:Te.bV^tK=*_+gjVl"%;#'O$5&[HB*\3e4mncPm;tWQ\T`MbhNKNqkMc'YAo<buPN/T<IjG%<^sj,FRmVm_-en5O3sd"IZ[.E%U5K6M(g4P/$(<]4Tq1%BEpMTP+(Y.R2'Bfm1dm,2,3<7?%9@NeFZI;[=[K<g%kR*AD$8[<gZU_%G2YU1Vl?2BB9mUG7BNSM4gT=8X@GsN5h>Z_^H8fr,>^$qa!LXAfu4sl7AL"1j09=U/a`8bUjmrb%TYTIXIs6bjqd*dh"V.1Vf^L@%`98X2X6#2*i<CWkI=(:s8c\p@ZpoNUknK-iRO'qq?E.8TH9"c(hQOf_d:bL#4eIZcdN\UHCBg3#b\bN1DB#O:>'F/<iGZAuC<<u$%(U"2;9<BWuV!%fRlBBoYUWKQkjfOl..#%P[8oP;rVdLG)cA4cY<HF-)i@]q$>U(04<-N,;j^p#uSlZV%0:C^Q(aRU,7^#mS/5\U"%FbdZuV"ZL3eTP&2,e$u^A);f:LXc$n4$2Z?9d^nM,HJd&ZGUX%RCmIYSYmh4g.Hb^Th[@1HIr<SlC[`0bZJXSMAa(T11WD1=4$?X%ZT0Cg)[k^>OJN/t;PUM5-HT8^ge+KNr_Vus1:eu:1'#;b&u)[cY>?Dpj$r[#ArV*O;+jT?:#N&+Q!@]dS%!*c-/m*--5>('=*^i`%g^^C!'rU%,7$+<YG>&qfqsWYW%TZXP1Ju6uY!WF3W-ItA/,Z_p^qU6(?$1=^<`RRE"\b#2C%^rdFBG)W?_dUBLK-DS`u2%'V[00_%NPPU@K5[k!d3a#Cn(H"CNonkH9MZCf-7)F/TrGYjpis8sAtYVn(eigJ"DY!D&U&/_<r6nt[Tabohr86W#l6f&80Oo&drRqGiNOV$%#,W=XD$UQ(N28Qr1W/sbebS\L5-h2sR3@6d:FH,2`W\fF:H^,kmGjJ>(7mBsD9&SJ$DR?Xp;_8j]5AL`$ta:Nn'V\VK3SQOqoA=3%2a?TW'&[<,Rl]TY*V$H(;>550#UHtlC0b1K0rJ%[]3!9JIm</kE]+HqIW!8Qg`>qeb5.C[734e<3LJ*,nB7eR#IDmq7',=VC$htP%r^O$'Chllr4.56^G-nZES5%GHjsDl8RR4XTChC2WCH%/piJO7A/SYiK9We8IX3bgj1cRCKLPcnImFf;gX'%/0WaY%:?aH$7mQB*K%*B%dFRs",s>l3'aEH8]p-NWYD&s2Lp-m?mF[Wo+g)fGbH>&f8EQCNp!jWF<)L:JL4/`1(]IkstjSs4AT.r<11/T[Z;T:.>VlY4QM%:f0&]\'E7OC4QpVJLF.;19KqGF;&i0Rpi#A;HR\._CG1en(q[C[`mU>H$?\q."<cHq:cf,05itSkH$;J,B&DtEDA-%hdgg9iG"Pu%Mn.]O)=:WOQ)Ec#brWnLVK-AqDQD,fRqb/?IM70T>6P(Rm`DATY4l\3(]%sVA@5p,LfliFB<rT4B!(BC$RD8?ltjO-f&^)BY5L6k%mVZNi*1M5"3r)XSlQ_&4X$W3k`COMk>,0O63t],./F2ERYG,/_j`\=c1*j%:2E*""Rfqdkc<AM?KPPt!o1f_MbU,:Wah^S"QGIrk%2!/"/ZT86_Z3G5YT=1JsRmI&pB$f;V_S(T8&3:DgCRbojYH%@W_5_o]@TeFGjF%\c(3;q9T^(lR#B:H(*$K2hk%b^",23[Q5O1ha%LC`F<Q!tqt^#$78r"7c[k(f.)cE/%HDVk0NI-0HrT(r0ZgV1Dk^&CZ2\Dr)1Ct<9j-21b0q#'C4DX5MlEDKs7DVTXYSmT%r5Ic&O%s43N4.sk?8gjA_eQ0XK\:9NA7n&(tdc>$Eub\nS/\bYHees1[HOltN2qr4%a5.K%Rrk4\Fdmnpnl]q8-aWL9T7dS1Scf)jh?gn$B%)+?dd:=!0f*ZV*&b2-ZLn*WdGk4nJUs8+F:hMWJ'rF;rcqH<aCT)AGke,$WHi`YG^rU-Z^<BV8#;>`)]^X:j:l7%[9&2#2o#cd\*%aVVatKgl<ralLb>)%:QWTlWjH&K(eZC##-Ti;GicFk,_^Flg\?9Xg5CSE\YPG<EW[n,ATQP&NE7X]Mo7e+gY5s17eLI(V[o]3hqN%KDmq-mEr,p(CtgVqE;@enFp,FTYH!Hpn4pZ)qGE9p:n5S=$5]u=0>8pmbXaacpRP/nX4Uu.l1jMcO;o6o&c_G-%cEbf=G>'BGV1/%Y5`h.C[YghV4VmZ(R;\[T8s3^7C5+H`cqGe12-IY(W4Af]1W?Vn[m71H[K?."^8!9mpGneWr)2RZbf#s5Ob6rAZtk"]k;i95sZ8^%g=\Lb&L@2(q7QkMpA3dM?@1Z212sG7TOP8N8dA*Y%=7g2QaoD7i8Sut"uVQ;_]DU&4!-Xj1?ebL@FY+i/KFEWDuP!mCsWEP]eB;!%GCD-@p$4-C9g:j<T,%t6IIm<K^V73;-lV`tS\a]?Al+k]X=/Mic-QE:;EUn&n\XN9cJuc-5O5t@^3Ft_4Xh;VZKH=YqlR2Xf'r:E%=2RPQAV5/sq`"QMTm4r]:ArB.>4b,k>1q(TGkUsXDq(F5p93Qpr68_k=0]75l`3cmd%A'r%\e@f#Q6,2BOu,Yfn4A\54.cb0PiSk%bO<8#5BiG&)L`a@l?.P_2JC9Zo[Rl:*#)s88*e(-DZB1OalB:QK-&kEdU,'!GNk7Y'Ffqc?i74u*$&DdXGGHlBAYjC+91p'okT86%rp]%=jjHGUcG0D>6k3DR>GUqYqp#`0NP@(eoYB@2hYH'\GDc\HJ,<BrTO<t'fH6.BIl:NJi*W'85CW30X*Du]pY*[&J,e8AKnKBu%jOHUX./K9!>5rs^oK#VLrAAbIRh#.M#CZO5pu4jXqmf"$'KPOM_u8Ol##FrQDHp="k_nV!]79?fiLo`$rQhYEn$d_L@kd9:^[auQ%5E:cSTI9a3SC1[Bq4RVM*7XlVhR*Sk8e7FV^:IUj6#W2X@2'[s])D4R2YqVFq*CpRX*<*eZYsaB.)#1epQt2&B]FgD0P^r4:8ZA+%?%Gj\f\3'"HFPVBKgD37"]P3SZ]GCi`r0d>B*`F9`FJHqrYN&5hoS0('K,4nP=bLZLk@b!5pqkB3b%p`p.B5LC%1;&j_;H>rI$9<%hTn[U+3uDdIRq)k@2>gIc`d=3]"Rb$MsoJ[+-p1qG96[e2`FeS/3fNYf$u'j_]2ppd:Boh9V^Cn0QrMLWN4KLnUaer_t23'._8AE%naPN)?^G)Y]s"%,Z2Em4p\-<u`tkl1]rOAi0"lRMA,)%mr9DCfZTI;aNaq&2:Hgj'H*HAtpqbJc?U(12e[$q/8ojYi^X;6&oZ[:#%p&`:+T6tuB/@nSWY'&dTAEhVdpJ,U3=ap%qf'U)nZ%D:km/7uRZ1R=RZbu<cV,q%&i&/5-<u3i>nZ$[!pLSON9&JM4Q<sO@'DHrZ%cEY(3iQ9K`ZFd;H\bbgIYEiL3f,pQZ9<Wg1IIil=S7D4BhA=d^0=_u`E8#NN@[_4B]9BjQj4X1UDq*<LmH_Dc5'ZeArNGMK\sSAE%:U:p@e*2;V92jN95P>;+Ffa$=c>c+HV_OW(VS=m0baX$3).rK_rjTuWa>!XAL2Sr&FfsM94`035O"u46fc/TM2.$#kK.Z!A1[iN!%L\o5c6_9Kua6nBDIgJ&_HQdM61EB+5DEWl4?U>h2di;'IB3/NSZ`j%HTASqk4h2'Rl*L(or^Ufi@r<Zd<VFY@1=KA]B_XUM3PQ7=%.UN%cFAQp#J%E18bbeBP3_K]HQZp#Wd%3D!3.`.')E*'"33ibU?+p*F),s**H;HiH?B"k@V=t4_6*J%bfrI8PL;A)IV1ZqSJ'"@F%%mopg],;;rajBn=dQrH#;mC^HN;f.R>1pggs1F`MYHQGV%=7O*dQqG<@0T0VcO>^d`O!diV?mbds&'MM^%la<@ZtuMcS($]mOr8l%If@sfm@TuOD&8]m\Pq(R!Asg[=4VCXFoSspJ_YNc'km#XjqD<2XrdNpVt%7mTAR@shX6B,oq&-n*GlGNqtJ+^^E2\^YK8Eb,nI`b%;ds`"\c5;1$s0ot,Q#J;WT!<RpXIsB7jBmA%"W[(*ErS/5ht0M29Jpk_!EprSYrSQrV"a$QrVDtM/M+c;=<3"rpfA7WhonI5<f:d%<=ER(?SQaQDHGuQU>YNUQ@ZX,"pd<J#((^f%0c=CCmJ%Re>qY=%Oi?nj8##a\rU`T?[h$;FgPC6:pM(Bj_sb1GO(WVD[Lb^jpUDM%o#al,.XQn:q6kALH2`gf><dV0C\kbC10-dd#-Z?S0Pg:U)bKk$b[NqOXm""-Wps_7BigQo`1<<=B7DGR13/ZMa<Xp_J,O/0c56$l%Jt&Bt,[[#3?K:50gXU\T/8&#7oNY`[4hnJ4VT3%YH7J5K\,GX1M9S;FEe]-Han-;=me8WZ0T*\>n@@5d8T0K1m]`(&0D;S#2;?<]%;V'k88UL!\p8$AJ9G6N<o>@n)lWAT8];o[(Tb*@;N>ts,(UL&4%r57sln=aR2N74EBIe[l/.BT0UiSb'][^b1bP<73Y6&`/[?aM8%c*?%%il_Q>#HIC1,@d8*?M]%kj"<ub--<Hk;r!eQBkKk?8\SE04C9]*?+7/>hQ>?in<MhUI[[I1bKo"6ceY)cp<*n\O^^U-^bT53%IoeIt^bL1&nI6hp'VZCT"6e37E)ANbI'6DQn<10&mMB>Un,CFN)3Or?db44r$W5R9PaIEud>c*ol.o\_Kl(RN?H(C9hGVD$6-O!\%6T"DXCoLX=ltnPnpQ6g6[Z@#;FME#aCSqQ-ok7kUmg>:khgE&c=$Co0nC](_"-f)VF?F]2^!1.#ZM]u=`O_F$1P<TYQ%?mio6:6(%_K850I#6./rdSeB\J7'/2>RIS%U`\cNMKIj2TB:o[Z(AI3+:7f1Dhh1IeW_\TDe1S@7r2OeR@$3B9mlhQ)]#p*3-.[bR:qdd9q6R%ddOhBL0"n/=RX3#ZUef\%?7WfgC[mG0@BWdf:RF1k!sIHjga0Ng^Rp;kOL8[T:I`MYf`Uj<RAS9_6<AME_I>&j]m*2m*WnaEp_ds%Z9LjIo<DR_\Uu>pNl)<Pir*BMnBkT;SI]L?(9t2dB@V%K0LE<Y\5NqGV>SbgRo\tB?+e$B1aR?AV2#au1m*B,3>bM;Ye?D0qoJ@D%.dH1,L9A;`iKJ=\11+R&CO:YOG:.5>d"[&;,0b'"nUZRj#$?K;2)\.-po%S^h0QE&2:^$K-3b.aH"i*dp[*F0?7e)N!4tu+2"gUD%f/MLcjfN,cce/Z=iu(9YhSo?jh8Q2HVbn#U`kB._m;CZML0Q<8WT-q9P6:4P;GHCSB<:B[eXXT/h&c-M!*O`UGRdlB`T[ghR9_B*%)>jZ@--tSI??bl%&l@tjAeC3;=Mfu*8@CLI\r^_O6?;lGDo#L7`P"XEYVa0eHM@:HPJ"]BKNCmc)qIY3:?BG^?7c[!h>fUH$"uV(%WRA1Yc1e62;_-ikXf8l[h;o#<mN)iQpHc1YNqF,T5t/EjYnK'jA0EmQObQ(\;gS,1BM&@I<!O)E9Q"63,F2[P:$I+Ga7^@pB<$DE%:#cWHfmY\^TEsM7oq_q$(+eF\pgs9gD#Me.e+lY7r2b>b+<(4AAPqnr/Z:O,6g6itH)3HU!-kq:'t&ASGr*AYoa'!T$EC8OQ3HUh%'O<@T,]-[jMbnP`XI>IJ)n7AJ2'I]HXqR&4%eFE/(\@'$o>1;ZD3rS+2GQQT?rcaJZ=kb8(00m**39\5/,,B\Bj+G&-Ri`\l;_/k%nMkeaZG5)VS2cQc/-k_oesgcV(n'1*3;r/+lgL/KQHKj5VaU.P_.g2-(2!+Qk;nm-N[2NH:;s-5WSVID5i(@+6+cS*?\K)C[@D;t%:asW7jdVbU.n[1\MqK_>G'?eWi&-U0V%Jl55g8N<YS(g18MoJ@p1(oT#O<th=q*8Y38!.%c#Vq>a6O=.1t]2kM:OWS_`7Tf['&$b%O#+F:_bl07^!\ktfq=&,)4STJC/'sr"$%\"n[d"uQDqcB)^Sa6Q`mk$T;O1tNj)q*YXZD*4ag6\L)O6-lbM\%m`Uuc,OkYg=W$Mc%G[EeG2,u);#HWBq1\4--V/r7'+9i2>>+qmo9#C3AVjV7+3=<`6@%?1K+D?uHLUrRmmlaE0l/",,>`qgS_+#$;AmG].Rn)cgY71ND%3/i8=M"LJi]=Xb"^4T3UUKJda;5k!hok!%4a'`nkiU-NG2eBS)?S.#Eepg5k>DqH"_q=]m'WVTHf4$R3M1&_hMY1:+`bDF^lZF@B%R'/G9CVuYp4=]KMkpl`S8N@F+T@,bOXXeJ3;m$P(dM=gRXk=>Db(U&Q[tB<A@b$/l57BG$GDga3n905^FUc>/RCd&YnLIT\&aX)@%&YIZc:Y,W>+.$^d<t3=:$<*t##cd:Va^.ET[,,-U;G6?CV+,oF"2ttU*Lp,qk>bTd<VZGFZ_/0c)_fmch<:kU@Bdo0NK*Wg/Z=H@%eE#YVSP_dG!+STM-:UE5,4=Mh]29!&#HM8+_qO*SVMLOph`%!'6]1):0!18(Fe(^#M-aJQH5:f;W*A]XkP4&egS=:mO5Dn:(S@bs%fJg9Bej7>([g_.]-ad'##@4$5B]'rCq@5QLaWp#CX8FAgcrG5sp=Vf7ha&X%"c)?9X7)_)=a`[0d+*?ejgkVNkb5'GTW@;mm&PoE%^4VHW"\6p,=9"fYXWG'/Y)@:@*H]l=(p\q"^4VI4Z/.Wc\Urn2%^Wk5XYO\(\d#m['<"aodU5\DOku)SL"g[nqPCV-54ZM.YT$$s%[j3r[1t)84,HpM3gH(JWgF*hR%#h+)F#e9cpPN,p5LZDGm/5c4O1g,nq&Ebt@.eYEc.5Ci^0[@ONRq6f>]oX2F/1J^5Ga7_`u^AD%\g`oPbi)b%C78o`CGlQs+Ki/N^BU_8^.L]$I]TmnV#RZ=<R@+."rfU0FgsD.^U.%ZB"*.6AA<[]U1DpJ@3`eIlrKC[aa6UmRbb"B%e,"`MOHuBD`?71m[$M`;=m0J=FUC&H/74"jG@t_eJt$);O3M4dnQ'!l06(QggO#Zp9.9[P0r<a9<t2bOHi*MeXKl*>[E#jGB>"A%%([7PYQiu:%0.iV5+ChfbBm*L"JI+uKfE^!VltY=rpX#rF^5kIlP@"2@'=jc9F_b0''26(gh-C+IrUe]0eYH6h=u<;SY@e;lj!oYe%m<f&CFT7g'nYN_.H=H/q+^^e#K8ls"o[[S;W]F)T)6>d92of#a^cEa\HFAYg?_im!"(<`&p^Pda%N"_j:-40HqN=UVB!uMWbdZ?O%ZE4&.4Dn<Z039!b@XsA,H&Z&a`/iigO8o#QbM>5hS3?3.ol0VRmPK+\WWjm&-k7q!YG4s&TC&Trc!'35g7]ap[sg%Y9fZEcMd,Wm%6`W*jNEp65:0\UgfCd4mHF,[k89rX8lAn&AFh(R2G3&4"="40n`dIrRMp+^,-3(U3?[/Ke<FSV#7tY'5e>_kl\hDUr"5%+q9f_)#%H_in!mr!X6Sa&,F@Kk/pGl#r8da0JR'%J8SB1+(*V-H5?9If6Rr)#8H4>Z`_@PrB;Rnfrs3k]`9>htX%B6U]jnR$0*)F['V"[usV%XAT-nGd9V'7d'Pm[-(+8\,R?n+s[$a(W/aR@"=Z6lAe'^cj#?JFEIs$+-FAtZpI0XW["oQIpUc/7&Dfds.Vf+::'(&Cs`?>lV5LG%b4kD*%PM`O^N@J9Fkq9U@p(tLT:]d^%.uc?IpS/4Oob;gq<dffJi^-Cjd@/I]hR5-"tX/Kq?7hZWhW48[#]?p/sLMep?J^E]4eXb%6C%E4)V46)p=5#Nd@*hhhEfMT[>.]fmM30AD5lAupK=9tCT-Gjc[/Z#dV/L9n1194WN5KCli6mf62KQ_WhB)=8)4\77%ZmirGZlo%Wh\m8_l36i*8$o+Y2i!tasO:-qr)SG;!+>5;>7sCcQ2,-\5E"<ofOO.,lM\mN)bL.bJF&6MS<1m=pI.BL@;36"ZN`U8/Ng`'3SmN%2Q;Q2Gho;FZ5;ue?)V2VJ9<?'(qpr[``_N5q[LS[dRR1q$JT&Ic3QJA\geS4C>aG31i0=q%Z#8Z4,^^e.Oq$fDs"V\Su6LQCd`g\%/#,64+,=8lf6ej<$H'.m$s%_V9UQm$AAc;L:"cbj)Fo2Lk:`,6g1X4`VK)HBT8J).(hY+RO;gj;ZrkXoWfI:c3)-HRbe![Bi1?j?%jeL7Xdi)j8\mnjpHrba$;br2&G,4tq"t^AuCT]^#GbC)Hj$uTKRReB@U`M`]BbE2bdHWZRNmt6kUZk=gECS?<MZ%#%GGO4HUZb7f%ELImM?#YYDlM?<&WXhhk]?"Z/;=At*%1e2*_a5kY\JuQ2.id+2f2hO&U(shQ?UilZ2gF+5O0O#g]aqkuLfQK\"q``1r?n^d,uKBr%TG=Ul51\(F4014HV'qGg-eC4>rMlr!D/phJhB#m>pMc%Z(4+q9;58qVK)dY:<dh8ZT/KBp+iF7*(IU4Y@D`dSh<DQpb0*bUqb$>>%k$h]Rf?3,mMTWb'7n_?aj'TGVDP?EDH4T4sbEY$$[XWch52)A`He@,r-<Is#I9>1W>[=q5#0FXQiE:1lf7n3khRm-B^(Z!@Z+edQ%?!grCHARt"]`2KkdF@X_P]annhhtLcFbX4cmSWgYh051!?/Ce+Q#ChmI/;uj$pKT17_e)_Sr@#XFkDD'#Be:/B1nL3osR&ceTKM=%^%pjAERdR/e9l@b0bYW\p0oW"hh`adZ.U]kpslW.',Fce*mN1l]D:j28+ZKF4he#_Y_skUDW6GT<R#DglFP7nlT=I95CBF-k[0nP%?Y<@\4g2V]n*NF67lOe)frda3jHY%=<;"YJq$oL?<FAqBCAO9ooAt_Q4YD)AUC+OZ_loV#,DNOOr1$fYS[cTLI;QWmQ*#i!7>4n]%4)Rl8S$uegYBVY0*7<VMf;!'Il!9udN1*`'@s-7.8g5oh1T=^"WP.RZfR"Y#9lagsNg-'5dNH,#GEZ9=;7J7uNCtODF@4KEOF>XO%ot!Po[]Zeo4nZ<QY&\r%pV-=3Co$=lHJ^U,)!Sa%)(D)P2T5Q6c1trJ]_WhHb&Z+2(XU]&H3`]3)_;KJD`:si+(4Nr**kL/_t.;k%m%u:k#o<>Jphm[K?FiEa+03$<b$so&Q1i+;e)erNH+*ACZ(\bnb(f2$6HB/_F9?:=5.g(%nhaBKNi\_QXHu]YqkNDQ/*j$I=PM:p%2dKRfh;#e0\o,*bh5*[28A"-/N#Pn]3gsrtZ<k,"e)lGLVX'i%YDI!eC!^b/1?5`!2<o(jZMc;QL)R@eXuKD,4,!q)VQ7!S8)$bi%*+Qm.dhRTek/9d>9fEX'qX15]mBIR42dL]Ior,Leap*C"N4>@[/6c#NJKI0:?(#rYH`s4.VX'?^),W=uDuDGKDRqT63,<n@h/p=k%\OP%B=4U#GGotr5%cF(&!-@mmolY@TodsM+QW+ahk%NEBFOPlqF3"lqX7!82r4]bF.G\L"B@Q\+<Eg9an8plZh%uY&Q?&7PfTY";%Y\6Q/\H[bFY32fV'rKJ['K!=*/t\LLBM+(8QrIGE0%Wgs]TAjc_URMCk1\o(Obm6mmh%_S?ecAY+uPeel#EtRI:UX[Q;r.Vh9ad/%M0#g<RcK*+F'!Y!gri1#8e%u7X6Sb\ek"Dk5bbtVfj/\Ygg4h>rb6Dr9Pp#od5?,2,Dq;ETs)#U2GF'<G=,_Ya1ZCS0"Pha4SnYi%"Qs$hBD[/V-8t>!GWE&BV*?W(aZXSr%kR,4CfC23bjsZqFZjLNHdO4Ld@p/:)hDqW8CsZ3\^e=0Ye#XcEIT-ZV5EU`O!6?t:1`WB%:W^k!fRbbP9GdS_nBf\-24'jC<L*%+hRac3Yq&lb"[pn9*kZJM'F`NuI]RNH'F`QoU:\.DR:P2G3Zj,QL#@rB291:6h/>8JUUsgT%7M1nkmmk3F1eLgsHYKBsmp:/UXANJEeK#4?`nL/gh2Si2Y=<^c+:^;mMi<M4@(&d_RFGN-W;KJHb+A@@f%!UCFf0>d'<f$"]%.Ou%WhDVk],4+PMEUdFInQM_W6W;ZDD6`.lrBs>)tX&X?Pc^DA`*":[@thO*i6$>Z]B)qE(U+k1[Ju/4GmRaZ4d`FX&[tod)aR8L3IgT%KFL.(BOkcjJKO`C44@P>FiW;<CfjS?1$H=$rS;EofD.B/)]D&l2r'DRVS&N!7*TVl)n)B[hNTr])qNe`Qg[R^dN:6c%<lsh^#C&V%rSMSGoMfnuIN#r*p?R\oF/ln)`f7A[=Dp!ne\ohn]BKN8X=\TZ7`36,YeT[-BfgEdk?QCo"3A`i1Epe.On<_/ns]A`4iaPiKe5,9%[<`iL6.b5ke)+K_`$D[`-m0;:fPl,5a$qnACRKP,)R_@XBk!N[qRu*L$8'i)N@DW`*jJX&Phh\K2Q#T(7NLd%DS,#Qjd@H#fqaI=%qWV#-p`@qg4Qri&WN(OUmnTt3[/Cks#J,\7Lf=*WL1/24M$Jf`#K/$:>h@`\Vi%2JddN0;I9lS<W3!GJ%S(_"eKJM]7b$IE=Eu`'%s#/*C?!l2Hp:)PiBttck_4S.EUI!LQmiGPt;WFqC\fOon!Q'i[,j!o>VB9uom6(?OET++)/\Uqd0ld3PI;<TXg&1^X:To8la7-;"%4mMIi3r$:/(/1nog0hleTj86lf)NlMiOs^6:4>%O&(d8]S+q6<-UUo0He=Y9^Dp;H_p)4@iS?]q=SD>A\^6)obuOH9`=nHW]@h+&%9mC"q5721O[.QphY1;9upq0u0dHTJNp<TacfOir0D'tZ;n6QfbO60Zqm\Z2_gc^7hd,d5KoBaZhZB)Gk&Ac=IkAkEaa2Qn"M;FRp%p*r6E:J?JG2h&7RCp>5QW90l0PB$7c\)0r.0)I'Qqj-[2=t>LQI91WRi6.23+5P`-ho\rB_.P.cmgJhr\d@t:mcdVupFDh6lX&[o%ZG4ib0t7(n_2.^+fCtb09u<>0_kPOmP;PDTP?4@A20!*+kSfa]!`Gdrap-sF1$`+)fg%L6fM@Eb9g'^HeLaAKV,`dZ6;"DPe9[>0%VV[;,GGDa;K`\hKDJ!T$8_U*rXfC0fY+&SP"7Q+96*'=_/"A^^6s!QQ$;JN<Wu4&8P$\*icUP%An#l+`(+Z93<M`^VQc;SbX%KEM%<B$oB3,sFH!bkeCVkrS*<?#-R=.<Puk46X[c0dYl#'2(um+hk9?h]AmIbu-qiJiVNj3:=YCs\/@)d[ENjnZVNbXo1E-aE!Y\:L+)%b#?l>SSS1PF25k;rY/)n!Z^nFg9S'E.f722GqIib`RQq5jmfU'd7?idom!O@q[TVPbgsj_jQ!A:KGcW4bmeksHqYEYhUgB@Alal^%pC>m(I=.;WQ11ZOJD_WbmGAta\GL":ks9H4YeNZ5Y59c)\<a82PGt`,X/rLG%`FS=r@_g<Fg9tuep)()U/YK4Ws.,Kfa;sYfq=U/%So[o\$J=Z:iu\*\1@Jl1]c2)4'1:_bj3h.DqA?<c/NVA"mb4,G$<h"#N:lQ!BthZ9k&O"Oot4(u08t%jY8)\4[0r=(LDjY)FoaMg%!Gm,n8QCCFUE74>lLY9dJ5(@j]Aq$3F9+;e!L+rOp>6&+Zj2\eecU*sk")>g_^sBTp=BK#Zj.-s2L$%2_e6[<aS/g0gBH6:#LN=g%"*FWF9W>&t;!'9R52E7Xr_gJm2mNm6.A'_cIs<DL=&e-C\Wj;LNGPB#P`L/\l4'!:0BHtDPur_b^Qbr!IcUOg;SMGnO[j[G?_dKK%LUiXF7MTl?ETNuQML)Z7=5W:%r7On"7WC=c_gD>#SIIIK]maF),<-XBl<_7)lBDLdf<>0S^Oa[b._4074t9P"M>)M'?TIZ,SddQm%]mdXDGng#LeQ7LXaOQCHqXs.7)Grc/p/\rZ<*o[^b'X*PQWAoJ%",6cDB`Aqq@.BG8Emg:oa<7M:`\V'^X@;D\l6kC,GoIYD!>*L%"5N3DJ+ArNM%=m8?`g&,-S76.Hi<6I_L7t?<HG?N]rP@@"[0Z7IV!AZNqJ.=O)G.amsX$X=$I&3q+#G.?[Y8;eTdTm)W-GnWIs'n%=(5p%>Q*XM%,MQiqA%Z0bMVTO40u!Vp(Yj0ldrK3FX6_Xe_fY).='!]rTXcn77ZW>p\MH"XYO'2S9$RW]mfV[,R\bup\NG0g>.H$%d=$C`oqO@XO0?THEfKPJ)sU`o4%^t!o\7X<Fg#.Hha>_)g[fm_orGR_n\g&Wh!8%<_`r<W&dRa[C1,>V9O]Y5lufL=ID.^K754MM%IX,`G]u<;+j6Nm>U\[0g&[7>0eSk6[pmO#oofBd[]2k]AX8%PmWPdQXQO@VRh<N$$6c7gIB3V4tmM-c=?GCeBVh2qb^=TRf<kk>(%D:81T%2nJIGctJ,^=NtPlW8S:?f1VJ%Fg)9OI"_sq@29i05gFr?Q&-8^[=q(][a4NPd>i-orBb7.VQ)<n+E_7F=P4n#/8]mA7*9W%IeDm@28@a]n@3$NA,Z-a<VVhHh!=,+=4s^)"'6!Kme*WW#]TsfE;04Z)i!^m%Y(ZhI7(*ea@"kNQX=:n<kg86XRSk_q0W(?N?GZ<%HCSNrn6Wk!2U'PBqT5;p:>jWDf2hBRq7V7Mb+Z8%F(>`bXS8&ReALH1)stn!H,W;D>cD(XU1-Di!jk"q>@2V^BNr\XPG'^t]ifXW%8+sc?CeB1l-Dr$Af+'Old[Tj\iq%<<'CFR`mosc*CE1jHMt-TrY:%#[K8YC)_LANTa]C")D/\QOI-L:HT2=ACHEjmKqcic;Ir8lg%EcucrB$K*+q>0p*c,3^Irq6%[_7tH#:.=F-S\JLE\To"I>TA3,9dNXu4AB1"*OK1^Do\WuG5,S7h8TB"ZhLZ_:VT)`^Q*1qcCFnt%q<@]k\FK$_&+<h2/H:0>E.._%k3D(W\XC$7]o$0XIsV'0H;`"(a&@J;g"i3IpbhRf]`*5kXEgFa4'2,?]`0tJT)ZMc*rN\H3<)B@%YBjDg0A!k=^JA3]g[SY>DJt#81UhSmVqntAn+"M*FRj"hG$9?^J%E#^WNA57,LcA[n'^UZf5&$8/t:eUl>@K&lS!\a\T<uu5CND6%*GTp),i0pEnACleHbS3Z;2-Vg"t]NJ0AI@$3F96sl=c\JSj)&$q"X[&b2h+?dahbkq"%qRpY#<ZG*9Qnc(X/.$\-%F=KhG`ML#oU%T5T/Q0]c$#T96n'GF^\GrtO)jQF=7TRc[kf<@eTt=rAA^ii2U+f$q_&Xn)Y+5]cnYp:GtPp%m@:eYW-j034G-c5pn8',Q"bT2sKd%5hji3p@"%I?_?f*j!QP+`u?fc?_9@=cX.sMb'<]0ol4XBQ<*\VnertQq9)R+Noi8b*phh"@)73)gXrmF^i'*CFEgHMPIGWuK@L5t%pFM/fU@ttiQTmjBA&(WU"[A22lM:[8ZhjuV5$]9;1GK>Bm)ps\f%]?+Xei/Ei)L-%mWe=B$W@R?1HW4\rke<2,;[`6ZgnX[rNZ==%]_k-0rj4Oos0O3SoK>4DIoqk`pp9tKrkTD#fNu2+mXj&3'"1#G64_Q5^L!"OqAGlmEF--=IRATtEn*OB0^8$WDCPL9&!H/Q_V]Y4%%Y)3XA"W[h8'J\Qi($NiP@^4""&Xm8[H=)655"H>-1"jIoM;+H,21o=@8GeKe$.KSqIBZ44cd:qUm<?[fu4N)rso/__<eMYa8D4C%R.,R6p:L9EmeP`(hjoan]Ar?#8_S@3ot9<gk&mg1ZTDAe$A/D>%6s46c;Qgk>'.M<H+s7EF8GM(qhN:C2F!i$H*f4HHq2;p[tjFQ%li.qXq;0QYG@_'I6R\&#nLQ[X>PDio:`4)^>t82qBur'E-P)08Dg4q0-f8N]U/.R&Y45lAr[[%Q2BQ;GnFNt-n`Z3.i:E+WpTnN4%-0PgHAH-X+p0#L%D-TbPSmL2_hU9BXO]fk?IF4oN4.1E2n+TbM$e[)8\G'u@#&Sh5khIX@aS\Pu6)5`L/((i7ql'@,p5Oh]ps7os%)>oh>rtWW<?Mt9E(7*/KI'Kdq*tQs^k0r"cXj'oh;e[aqV7nPkEKF=$%j0])Q$O:SnGQ_SZVOn_Xf:j0V<O&>OZ19-2ps'W2m6IK%_`tdN?b#q'#6+ZfT<#<gKi\L@j)[-m[mG/r?@a)#q?tth`pD'Q.kRjZSBnT"5>=@j5Gr'<0KU%r/L!3%1k^2KC%HT8B_Dh)6]?u;%1IF9_p)h;kG38Qu(qBu3(;J(WN3n1U;4g$BJeIIP"1r-N3fs_hZeX/kG!34ehWeL&M-,!q/)^ofTsq_AR@.Vq$M7\+Q>%3mroWt:%-^n%9<Yl#GMgT^N5BiI,ki=&\m)sQYG^:;^Sm6X3a;^an$$+jGAoQV<mAGIh&;C.eTE(L[I:H]orOn0lkqt8Q^\qd_=me0F-i(9Y%ro<#63?\"]%Yf3U``CFZ`uiGPa&NZ4C$0qW)7K8%)u[)nV4b^T`>`OU#4&0[s&tn#a#ebb/]jpm61L=o\),ffeHS-b4"ot>)WJlF%pL8s7Y7'aq!5DS.O64dlIWpkHj?B+gi9Y!Kn%/mVV@RKDrq/9r+`(r&Z_"gL6bLYa4[B04j9F94CPNIs4U]17++\rh%O,fLFb'Fl%YV-AGoD#MtKe6FEd.tQU)as-Hb9V#'rRiCf05#%-VXTc8+3(1()AmN&XK[o1G@/0Q#e,_Y6u-dr$OUO]U\-UL08n\sH]OMSO5h;l%afNu>KZl[[^&M7s*QW*-07;<Y41=2*AamCc\]`#jXMo,#n!5l&L287;Req-+:<H<C0b&(Jo+$630(ckb\RD35.osnrh^8mbE7/ns%=B#*dZa/hMEYM6/$r4aRgMS6VZX-Y6.CTn6^rNpANM+2YRr:]')p%1AG\r62.Yi7rq9BIi:cSZN7q`,%<]0rM6W-&TNlqnkLSJ(2%p'`aqa^#!JdS8Va6i<t:%=*^idf.i_ojh`QbIsYXJh<"-DC9r/ffbZd_Zc[E*d?Z7>0?>6[o[pcO6ibs`M[lc*M1F:%_jc)dI&**%Q';'QPE.rp?06UM^WQL;^X)lV4eA.fa/]9]%^0r'5Io&;r084;n)>KLjeG&NT-lS.TBE\ob2JW'?['&Q(V-d]YOZ2\k2q*en4<QV%4>Du]b*/%E<)1_[;`XZ=>LghaDB^H0\VZj34;df/c(+ZDo5k#GM"\&:nBUK(;\F7KT*o`"Gk1DUfh>ds*(FaUXW8CD.C*UqnZR03%dot-\e'8lPDke'Q'5K4=@ZeX;TRX,RaW>6Pf9WMQn5VXKph.hg6/dcnju:NR)QS^2-MOEiiT0tL9L%jEQp5Dp`?0b7ZI8:(=6'Lm%QY/l7b:de;c9'h'05kb\\j+Q,W;u68BtJNbNJGO<]UI%smno*^mftg1R"!*MR3#gUI3'J6cn>7Qm\2FH*p0i+Yh*U<,LhMY5Mpab%TR:UTm2b\hi1F;_NL`0nfq-a1K>V!K9DHZ@s4DR-Dqagu[?dibnbMq4^XmtS>Ar)AV\?$dcUaOXH,`2d/%Z.6>o<:kdP/S)<tW6P%qjn`bhLE,Lrd=aLa$8.),qo9\s7#sO',#a0XF6N6cBLG<HLQu8/jCcIR*'h@kq%WMbV?ULD(pE6hJif*'CiF,YN&+p([5;Pq$>P8%WuVUm*Wf2%fqj2G-GogJ,N9[`!P6p%_Z8G!o>;'8FPXq\N;\-Ys)gH7r`%5,i]+0<F93Q:IqJ]L1ULJ$ACki'-M\GNKDg<b`1Ii)%QB%Sf?b-++C3kBqa_(=OLk'JmXPfTcf>Rr9T1Gups0@;67(R_/a8alkqI6&qKkD"-H/JX$":`olk;Ne?M*GA8r8.3qlL)RTP@k-Z%o9T^=K\k1[UT!&D1GjjChgahdJWFW\^]2URl]PcXM=5*Q"h_VM`qR+EIk.WH9r"sM8s?NVG7VI7Dr9@LoCJTTZ%^chf$a.qhqu10%]AC+^5Q>^%J+#>!:EM48YO9Gsa-N=3?f0[6UQ+lola-1;8k2B9&kf&/HL=s-aJ;5LBB1br`o#JC`QlE6VoKa+H\X+<[ZIgQX*1(D%nDRYg$3Ll9`i%,\QfAIgrdBhl\(G<OoL*CmS7m.b@cRB0m9t)8<Td:(JjsWho_W1jB&iJ`Zi_L_-X+MG)1R';qsc^lT=eEW[K&Nf%(QF3*&a<R"7moRV_^d@L!c+4Z8=.=4Ali%oZ82IRdHg>ue+W+un;<4_BGM!<3A)fR^t+X-p?l3"-aYi8i%P$+\O,h&X[Oi`[HVND%F5V3od8+;])?$agccH0SeU09'K9lT)bj1nE1Q.^Fi$XfqG!\@1httUk3l2)kjRfaB7k;]_d/@DW.o5?I+,!m&=^Qi1ES=bj<8]D'%#;u>PkB$6M!`,Km#A+U[?[R-G>q1s)o%Vp2D%+V6!V:deR5kY6p$Vu;(B#MM!nG!L`]g,C5_*^6,a\[ZHbMu!L'bDTgs]"*b2a"J%mG=<Y[KtFoDC4?*^<\,+l_(pEC?a:G$hSC&b_r\^X16'-ZWVaEY@sokRNf;u;i=cRf;1nkR,QSA5n=[Lj"ff;,FTiOBuJ[@l.[cF%hHHI6s0/bTp2o*B#RA)'1NS3`6p$1YIihBuniAlCmF%%AH(DTV'sEV$PPle%p*U*:J(!#@Kn"O@[6cqM*irna!US@Y0r@,,^X#4b%6>u81]1'.1YSI:h*Z1[AieqIKp"^E&?^Rr3B1i*\qm\\=[?+hgj42D=#tA:ANGL0[@H.O%s);\dZeb$[g4E[,26kqdp\\lXFU%hf%m$iKq3D8I5/$/Vt_lhZ\pE-m,Alg$$*u?$4gA:>S.^LEfXq.6XAZXA)CW<0cUpnJ6aXH&QA:"'TlQG!\[!)%\Fm4?m@m1!qJhhJN%WR[iW5L87`Y?l$-*:LRl5<XG'PtetS>Q=D+@V=e7o!21V/6<c4+L-3I!9l$iNuu%XCN/,m!ceki]M3sCQSZKGZ;(l,9Pu:H8,3o]%r\Bh6HQR"m[le_A`8Bi(*H$bOnM?OW+#s?m-)ep!Nk0hLr)-]nr:fs9YD#(@r;gtc9-ri8q*HD=O8nIg06.\d%"s>,:R@$J+[%7c%1DdgXIQtEtneWZtJ(Y7cXL'iGO4r=3!q-G>m1iV1d*Z4$fAnutA7Pa.Y=Vq\Y<AG\M`YhCTV/K(.>Q*n3`.We>SLe)W(<Q,5CL:l%An&o\Is&er?[d#Mj^A&)8_=cDT"'V!?C;sc9GN>-38(pCO"$-N5<ZZ\%82J3HZFr+HE0#YgAU#cGgCq4?%E.r+j@6VgH(c5AhVaK%1pL\$?ad`Lo[#.We^3?G3=WTF1li]Uo01H?Qq-IoUT2MOLoRV,RQH8KT&5,aOQ!`oX[BY0UQ)60A77qsj`J$*]*u1JhLAfGDOiNZ%_T,$Y->/7^62p*`l:`*bdnW0"=+uKBMZY'bgHG#B1"6RGdGR>"Hhjfqcj@>A1t9Wk(73775,pQYDpq/i[R%A]EW>^i)_oU:jf6*V%I&1K>I+kD$#+Pc9Q+&n@7/247DJ[8lR/3a%K$Kr+@MpS)QOLlS6[UC\^I3AW)9u2ip)=0ojcaT\[HX(sRUa;F],'YZ"h>d-aa#re%mn`;JY4Bo`Z@_3fI9<g[Eqmld\97F/QE1a9&(9mdqe>?mkV1bAhG7)-V_p>jpX@XdEF0U%qe>?m;##*>n#*/RK3oMOqe>?m["e.#%Ref3a_[Pi/2"c8.@tT+m9mn*&bT"Y#C$PT&VM=ViRef4r9BtF3iR6CGL5%GRoT3Vj`J;!CDpJ+sn,MU,Nc.aU:h=#oj!k.J'Q]_L%g`VX>[5c#?W";ISf53,HS6d69VYs+\cRb1)Vg.p`56pq"/dD2c@<nG<D%IGO0?R$9;9qG?IT\ohraB.q5Tm[L*(JCZ6#]]3,02<q%JV'kH_<sapK$^iDb-OFOL>31!QNT3"obihFq_K[&ThsPf#<dQkLbYtH,TgN:e[RTnD`j=\+s=f1)[bHXrP+WK@p$jUmiQCQS]UA5%CMF2!n'CGErnmn+dG"EBJ$(iQs*K4Lo#LNT*rHQKRq-#XOH'KA"@")`G"u3so^%r044^rW9cYfK^V/P"kOebGl`9(#ruG<5d(ud.%rpIeYneaT<"OB7QRt97;8+8A5Bbk3Y7khiUQ8eLWrdXE%XbYK_"8qHobee-C!D]BVVdhN0cX20Ho6PI/8A2;$=TJKZQD`mOn,4p;%GQIj>(I8!V(66'HqsquN42W6![=ZJ8LIi8@`I?6qP;F/hC^"7u:;&>)=JYk*$mB'EnP_^hB*8O(0I)COJn43^hFlU+'Z:!0gJP&l%&.h;<!Dtog63+ek@LiL>SKo\[\)MQB"SajXX]10R"msMAeQD1;[ML2KOP^Q.8<$%UI+G4)r-"1!0gWHS7IZ8f:(u9@."c4ZO\_&m%Mdm".pAec]9#X^YK<JjC(^V=AVdf0RJ>gu@#a4uq4p/!h%+alm0Fm(J+AnRM`,@"@Y>$<['nq/s08)QiYmu<DFr&NcU374RJ4bOJ%o'rE`*TFXB&nEgugePbKO:*a<WJ"Y/Mun52OICJ%N>/EE-:j50ME[C'#u<k'N&.&+$59-o.,8p5HO:s7$j!T4PT[3"3-YFU$hWFL%!Dl.\d7Ghui2ngY5T6FX!E_CUf0Sm`^TB9,611_f:R)b&E!V,_ru,][W^<-eP?\*Wi5,.t00n=1-3S$eq1Q;Wm>!lB<<-gX,#*-@%,+Jl=Ca]lBlphu2JcPq;RL'T;r,rc#r(Nhm%60Z/-jp;MM!>O&8lL*n"\OBs,6WH@"A.T,-:epKr(Q5XKEh2qcuMa_'M')h)T3]3%7UHIRYarS^%YCn#[RXXRT1[gd(<M+9(?F(t(rM/B5fAJ?3$qs*!QUeO?K/qAFnd$U1\;Dl+cA]k0d+_k]Taf%);HCojrc.2ofs;R%LKR(W-%Qg98\u-=a9X1%r%Q[.&r!]d+D1`mWC(3o@`8`hHFR@Y9p@;%k"2$;7),=k$/Ygs_K;tj?U(@MOVG8;RDm3XW3@<=.C3<W%1nOm-Gb1Yu-`L^D#f]>5H>,Hs&=!7c;g8<dBpRm(5eot0$nG^OK[LASJKd@DBF`T\K>`bu6us4W;a`s:GbN#gnU2jJOf>uQE7BdC%ihmY=4H5/NJ76kWNq28#[6^lLZ1pNB%O(<r8LbkDdP+J2aKo=740$28ab!V+-=Af._`10#(('CX,MVQM$.EDPCC0?eb.WP"X-i08%7JiE*s%2d8_;ceN6mZgmCOrO<3,oiH-O$Lp&-OO-RXc^*&%n9AmWi534-SS8&E62d7Z^Fs(gIQW$d_r\oBQr=aG:e'#S@UKjUf4'%j+nh.%E&;\GJ^-U>=<4.Trnhr`Isq_a$J]S8>9cmTO>DXeZWOP#XDZua>=>%Rm%(upUuMc>imhVGSuJd+FpUsX$$guP9?QsiZqJ9%F[4bh(d%B\$l#][8U.`^5@JQpAKK0gQY45`0$i.f@OV>4O%BIiEWH?Hr(IGc@gYc<!tukXTd6:-J]&As)i!i_)!!jbYfPE@nWXTJ%,Z8@Y`(38?Ag(n/5B%J'nFs73&XWYkOD=`G,Y$7CBH^ahA5'bB\0rPk^fN983oJu4@k$ZIP)$_M),j.h`0nW.T1&Gg-t(PC9(OeV%<?qZe&2;l`]h]D51&rIH87mI,Bb]"Y]HC2WnU,+?Kc[N@Le5rgUgmgn5)=1odu)@&OBM[FY)OM+`#3SC!8uO(,7b&8UnOM.oa/HC%8j#dZ!\>[W=Nhsi;U8FuC@o3$OJboa,9Y9Zk0>NO]sA8e[.7uJ(3sGRK(\4q]J!-:Jd$p1asfH#%G$c,nob-F0G*R(&-u,@!(?X6%U`S1A,VIH2rLP0#TULh*@S%<!GN.`O!3iq`=JWGqb<=&^2c'YP9(F&+&D5m'TFhf,Tof9S;6^qK[B5d?"i"8k\*!D3rs0ec.a".0%8E3rI(iX,Xi9UH,VER@0q@9SL-"3Mk0Y\GQJuo.b"2)V\d@Z:T!>;7aNun,,MAY.SiZ5e)J`<B.^sEPMe4EIV$OBJ#aotn)g'SuG%D\EEX1$L3C`'I"+!`*A>#rS(m<lbgtLj0E7!jBd5:n@Kb1`QoL+:;O9'$rR>4%anHR/?e&ccSW/bCVH-F+b[4]Chj"OG&a&1ZQ;=%F"7\WrYSin#EWPV5K9XWgOq27`Og[DXdK&AYYNC/U4(MY1d]QZ'+hMk"'Ub<JK0<qR'@J4k'NE`S)CQ*"S&4NB`t5-7*\C=0oZ0l%$oWd$Ad,6GmDnRpOGt0s!Ag;Jj=k<j!\"b;M=>iN6rQ+i1@TZh>lXsU(:)9o;!GtKlZ%T2*mur3U,_:J]SN[QpCqoh..(uL;"=;4%!X8qQ(%cN3"#-FB/KD*,)57+cV4_g(^I+7H0rb@P3=)>^$kNTVObFs),M'Enbm972FE[$'&JB-rk9^0_E%q)2n<SY\$R*P`V96K,%&9=E44b_H9J]O"j)2.ohLN7o5AD106fg3DU9Jk]G(l7oGM"FL^AE"&AE2ug[%"uA2!?D<2T+fZRoAVG:)B9ogf)1A^;M(jS-oupe%i`$a'J7(&5V+C^B!;\(aa_BDB1mG;8V%@<%l061&_O2$h"!C1P0K0)aV4Q\u6?FT;JCr-:dAA5@#/6.-D(ro0XRIZ-=9.nkaCt@Z%=L#E)+iP\E90BX\5mIXL(;keGZlnmqA!Dl']EQP5V4!A50V^)WA?_U5il5_4hC:dJQc-`Z@^]#5Z(Fo\\36,hnF._lUL:c',7/4P%`9]=D,XQ;+;Sl*M!?`)75oBc6RisfsKiUl:LeWC:;q.[F&cj9N6UC5K\5#m6j[;rQH:<,MW>%aBj@`@7U7[+a0o@//f]^!S*E6H3%V6M@PPXI5=DMl^Raa[,'522/JDO0;474EX;6J3V1&O;.-Ua3`IV7r-/.GBGY>-L7`ciFW_S1$u0Xaq0^Y`B*`29r!G8cX]U4:3eJ%69Y!o]I_"9,si6`pbs4k$ICPdd0L*-S01E(WF!R]-f::=!'VT"Vo/Zu!W_hpV^!u!iWPBtTecl,W/&g*K\]0X\2>,j'TCYcMb0Zh%b_[O6I]T=nOq8Bt0a8KT]Jl@R6rp"F(5QAUQc>]O"t>EBi9)5@jAQmV8sC.uK0iGoC[b+qgS6kY$/p0ApRL[]K4ge<B]FFa?_uJ-%A9ZGlT#7I[BWSD(E38'^$tNH[A3#Zn0Z29U#(h50E--h.'8/B+#$;cV7i@?45isAD0:4VLWV`qR=]usnV*`W[I,ENi7gMsGP9fc6%ajCC;P/N','bXjf.*'^@8Y\,,*0%0*]lqTH#k:$ZUPYacBL8:u.%1i"!m>^(0Q<\qNYrLrS,+VWZ#o,\=dEY[QHk#kJjch'/.$-b%//IdXUa%:q]M+/BaR49k+^4FK9;e`(Zj8N?SYd6Tn8g.OU32oZNhlbA*fXZD#B;;3@=k<rb`JJ<gp4;XJmdgWF\n;5Vr@7M?cE<r%K\6Uf96=F_0H"?G'D`g?)oe:"-1!6TNWq6LdSuYX)2=(p+W<,[VA)2u0H1Cs)$p:=g:cVC)+Z!2]e%4M=ig#fj(HP\(7>Zlppl;q%*Bu&rZ/S`oP7FD%8HNE:ldJ$@R/?7^`/XC9'n25R&*lq>N1u&!^5/Xf'KKe=+lqYiB+eXGN\fon.L_T)fr.&("9:B9Gt8_GRIhd;%Q;[Y7plYb'ENWS=$ZM]5")19R%:^ALpG(i%\g\Leda$SAO`"mYO)udhI\]>qnKTV<NAKc0mbC@B1!Yc#gZRGC4)DQ##I$t!"'H_o%J[>fAJ0^*Uk<e2&_7NI<$]-Pk?R$r\'h6Z8<![W#7W72kLG=QYqc&Gub>?:U!9I7M81,$YZ'O\96`Rpl9."aE,XT?nMPUh4T$feJ%%E,]FOn/PZ_B<JNiM9ok+raC<CIsY,XL-"?,0('G&)>NlnS'0/'rEri+<4&9`>g)/A)j#.9CdrejG@(qD^!\g[-n;eYIk.j6]ahl%;IS]8;c:"M-lNc^6je_boF>K(8-..6U`J4b(N'<"M*r3UdCE@$:*/aK+m/;DcO5D&V>%8TQSh(q`C]E:FbjEik;)$T&<-rUO8G7L%]8^At*$dii-m,dhJIDK$+AVO:*5W=qc]VO(KOj.C)#jmkb2\;NFWouuMIm\A&g78f^2Y<Yl8"A3=r3>M0d9,V>t>)$i9E9<;M[^#%66Z]>QT,co,u#4ID]_DBQH!D&R&sk-Flu+QeR;f!!;%BS^cIQ_.S+6N!!Q=7\U"9Q:RI=L^Xp;PAUrPn0-q_N!2>Q+QiXjYYmN0L%8[O:>C/^LeVSj$bHlCtd*<]*ceCX/7*iCUm2!>OeA;-+9Ih"RBT3f\TjX"kD+XR,1'a;mPN(d\HE6?4?F]pG6#e[#7#qD08@7jE$%*.ajt!W`=[">`I@SqTU`bm^Ei<`\u8g\65dl$L.e3#]pdZ,%_t:48op`#O,/J>IppTS4dD8mmls`kmgnb%PcUSWY.[".#0aZ8ii?%MpnA1qc$t?n!HIn5:Oeja8)s";P?a5_HcRne9sB++,?LE&Y^^9jUqTA%s)\-)ckn._`Rr$2E?OhaL`/uSb1n81uB,SFPd1VLM1[K%$;hN,4;Ht-.*%@!!F/rEpdS$Z[PdT'#<=([#EqJL'9iF6>%eduJH3L0I%T:O+J"M1@3Ta'N;8)Jo>6_pMic).OI:&O=X"lTGNr%=%7;'IPk#P&2!6Ln7kl?a\/I3%<BLUW9E7K?XR77*<FhA`8Z%-d=*D$'i#QUtJ3'S$!kdq-[&j`1j7#5#T_C/>,,crcFUZ/q7&YW'j%`8[a%QnQNKBo\'91)ON<plQEibi6S:OVk/nJk5[!&W5g4cM<S>&6:&%N#r?;57iAhr*"]WFfF2::@O,s!CF"^0uiIZ"B[:X2U9tl%+X&CL?A)_3KSf1V'dYK]`/Tb%I`t:'$"-@G'A:[DTHq/C&CHJ*5`k2#Z`u,:$_;$kCH#-gBif&_8Gl1q[U,b[39.lmS/3V^g@;FX%)^j'.^c@N:d7Au%Os6?BW"Xr&>t>6*(\h=6lQ;(/8)sifo-+d]\u`\L$$m8\.)U-a-#_U,+LmS:%"f:,Kl:DR1<Fnu,73=3]D&BC%M3O]&K(U=EVmt#DH]aW]/1rNiqN,"<.[5&ARq/;c+W\cdOT7uO,S[t#*+3MQ5[_G`fT.LSE_^-RE[D9Dq.Atu:%fb[>+`ep0+qZ\%c8?Lf&d.j4(6Rr>![M?4e3[(!BGr62*m3,J1eo;_U<j]_UkK(5d_UkaBh,IXV"pO",OM#&)enJPrCF7SiC6uj#WL1@b.<]NS(8Oc%3#@%>h&G<Cg)Y9RqBA3sNhh:e:X[(L/*UH]QNTikdK8c._Anq>KeJ;S$9aLS:mbS61+DNDE=s0EULh,+WI5,Sa21Bgq?2Vr9@KCa%M8A:-oS#)XiSYu@KJSJDFV52$R<24BB+d]i^+2kR"BhMXbMfP8:e5,!9U<iJ+"ip??V5Z=kCA>N'DE*c>U4r[n-opWb!dSl63_ku%B6en-b=].-?u^*-cC6ZZ8U2CdHGiU#hIL.(ade)CV,u6=F:]hi/^1bh%V4?d41KDklkG+;M2Bn6b@L_djr%mYZ89q:JQBEQ&Re5Q%?qgG9&!I-=K^O.;UAhY3E>T&?&U-&5nSWr<g7P2%ZudZMq%EI3CeS6(m%]sK_K6iN]ue2KWCGoB-5[V]U7=0!:W6M+ZS@B+SP7#>%RfnO*Pas`NA$@6hSMpiT`Kn()-CnDKhBZ_+"77#22i/_,<12Ad5`+sK@Et>F`_I`B3_CRShNSTB-QU,cP[+Vf.'"$k\kHY+/g\`/%+Xre''VdOO8fFuRZdoOY3K;`Dgbfae#aB#cN=7'1g[UGU7ku'3.ose-$K-%(9\(#Y'P7A(IZENR$jFCjLb_5P0GG2Q-M)BOYp<f%%g<I](m$u=9P.<;iQ"WtD(ir9+V;ArUV_KiiBX,?tF:cLJ%]7Fh3t_`-%i1rQKE]'Z?8:3(,[<2/qMM3\'5qU#*Z$,?E%K!$U#_`<%!t>66Wib/Y#mb*<P@UDu"EUAY544[1*::)_=p.EE_;GTm[$KWKbR[U4JRR[d1e"D;/YJ#(,rn6lldOC>p*i]+a<4E=r`kaJ%9'@L%e2[el'bVc(2.d-P.R.>Z_UuT+.k0L4$hZ,?Bb!qC`MUe1fhFdaE<qr_CbQDr4N?/Z85&IdO3;!4OI;M,m%"?Fcg),jj1KuH5#`u^%UaKEBk(Taa;d\]T_9c)o8#B(>dR+6kYdtI8.S@&_(LlL*j'WRIOV_[@%b#siQNo\unRn;)=.CKS'#MW03=mDB+@,S(_^9h-gQg(]%!#R:[dMPYW]ApK.RNPJ'D10Wmd<k\@E12%`#_eD\VFS^(:Pt@"kph'4eJV0WPfSF)5aVrN_d"'5_NNPNjq<YF#h9S5`,_7h1<fD;%\r__97#,1(\[&0N!4kX4Ll?rt>84'kRrCAj+KN0ficE(#Q"mP1[2GZ?:VkWLBsX=Lm`140<Ze(<63G";]Kf$ok4-9N>;+AE>-I;%%W7C48'p$V`NZEN,<\])?ULCbOVB1Oq,.*Go4"q%tg]>&/"^%9_;DO&MQ8uh,L9FO7&'`=S8qUMC(uCsJ:D@:^0JXm(F[qgB2N[Tt%J70HpaOL>!j?ITU3D@3b]1%u6fY_**TQP7/@MVon'4L>GcZG_`iBFqdQU@2!#`ITaWce+dehMdpNJ1m7_&,-R"XDBn/k:g_Z@q!A%d%Z>[8?NO4Z*I1ieWDPp7e#dYCb.#j7;-rL\r**uI1QSa*+p%!>_%eA:GSqG`s=N!Du`3J&M0KJLg>\".)*IA.<^Y!L\MBETYf(b%2D0NZ#oG!H;N(WHa;KkKQ]bRW)#5",?(k7A@;$[:KLl'phddO#b0j%FgaOo7SHHJY,1WWRR3]256GmP[Jt\:j8=7@7`\nIE'Ol7d%UD0CBM^\u8EN,#,$^PD0:-)%dQ=JDp9I4,;QEX'gpsB2PUVnDb>o\uMk`R^$jG[:[V%_8/NNaNaTu:W_F[Ltm$mUSo@M:HPkqe`>%&a'JeF$L-Op.]..1sFR8@'a3nNFQV:6;C29g+cJOe)Fo#NX6+K3/;@)Q`Ur*KDjV?c+KVgRkp,a<l0g>;u3D;8:d)$!s^LDT8Q9-%/(,Xjn-_4^QGb2uitsucg>-Bb\/9i/`]5mI:2,LN$s'S;Tbl"7/\Sp6rTEJ/fZ`('o@)0DbBMS4a7uTHYuRFt\OI7>"icmZ+tm@[%@?=mQ9+%<90^bH/%qj^2(TEJuA:(*?@\JUt"o^<=$VZd%6tO>%p<a8,m2@$J6Xp_.=qCqgj""M:e46(7=Ha?u&!O@f8:W_%M"I3T%G4E)k"CY[?kuK"d'.iJV,Anca0c>r]Un2:m"c93lBI\_0%O$lU)-<D;03&pZ#pI6/O*Q;(8o[]0N_Tlj!PtAZaS,Tf%/:J=^M^`[%`Hg6@8:@uK#+>uhpVZKPm8LSr%nDMAa3-i@#b%-FUIGP70#5CAUCnnH^B<mtjq;P3KOL\K9Cu""=R#NjneCWKTo(&g-(@/q2BVi^%P[p:YTcPZpLBr]8`9h[bG2HC-UQN0dh,@F:UEO>D%:K:l[.lZ.A#:3/HB2b0gnfq"[CD/@Ut05f!BK1/VJfPR@^?Q:N?[(4hF0,.%B\FohqjKtg#U\7]E#rNS@FG+G#g'$q/Cq/Y!8]GN!SoQahoMQ\L5>H>mh.n<C8C#)!.dTo0ntDX>_>c_m#sjD;)J">:s'c?7Fg8M%,,AomUJDI\s!S?7C0bX>$>>87K!-KeDht<q$Vj&;j%$fV)1<"TO^m/UKPe"_:q1;:oj^^*+@9"Y&;_N_dPq(B2TR,b,oJZ3LJ!'=%`rIZ=.R6OVAq\2HK*_^M=H]$u'Pl6W&DUGo/CgFs#e+sXRD]Td+W(A2`L?lUs2F1]]dV%L!?GU0T-B^LLp%+#$YJW\7G@sh)b$0D%bu1r96,9UJ&[pm9`dL0@^t#N>nPK5Y9r_(+&e=\\,Rb\.0,P@4BBUjX@q#W[Vq$&nTqPs<bZ3I_7ntmt3im#;6-.uYpR&?D<`V>d%+>HZ'6jf=L2\9^.Zl<Erh!/S9TV'*>Y(?(5OlJCt4g;!9r2^#hcWn+QlXTY8JlLd(6Z]KATos0,HkrImU@Gs(_R?a3c.<0)H2^^Y%bc"q<AMJ\&I_`VVr"btcnJE#qfjno,'-u$HQ6^`T@+gKFO?m"0nW=UtXk7#k`b*^j=?>Dp\IG:GY==n.9!O:-7P_sWnpB#4m)`C%%#gZbia,TPT/rgC/Ji-3g(lJ(:D%EM%ZRCT"$dn2#Yr"#m?r9G2@*:<9N!OR5f#Zoe@tRLG(hQ2BN^^KX-(deh!>;d2^YrrG2e+jM%`:N=d(l!_hIaP(T@BD3U7OB+AM'tp2F;lNB<R?o6RLC@5Tm*Me7L85^8O1oIPXJ+T&3qG7Le&9n,gT-S/\@_9H[=FFDVbu$JH61]%"t]jaR)@)Z&<\a@DqL1]Ns"\<HN4Eu1D\4B+fTpOB.i(O!^[\`1]2(q#SZ3D,`Sd^7BXF<Ar'.=4>Y!Gh&/<kKHOmu/3rYX^SYGt%>UhDT;p_a6lO?)o[:hUZ%LKu#PXtaX)X50r8S0AV+1pNk-qr;BrJWJ=OH2.MpCu3V)ia.KDDON.M@/0am_VmOOZrX"jKr-Z'lZTt%J7*"n7$=cIg'L=fA)*4?5@JY=8m&)f3/!Y>Tkl"JL*h5%;HDj5c;%:aBseGe!Z$Nt<V/B"e.s3I,",YF)&Yit*/FP<b!M9pK.X>_%n;7,mNfo$6,?u4%rmFRgCc=C20?-sn`gR^g!H-$?r^U3Efc%+ZZj7h((e#(#E;:?[mV#_Hj"d#kjR#e'/7OG"=2<KcI1!h8)E-Q=%#XVYKjWJ/@!_*J,)CaV%JaO?Y4&\B&H*LM<,0(he_h"c<.&?<eCmT2:&acUDU?di8KT-lo#6^-5G(rhp]a<Y<:u:)k0:?J*3iF5o%d'7Sn%#!@:H&(0R+h,NPduX(@AgD4MErT\<WPH))H3-cd_E*X(a,/%%(4sQ!Dr2/(+i[&TA9u>Lgb'Z3iZlB48iX*bUTJhId'hnZ%$)\p_@doYe_#$]=\WdXhL^8J\"(Bp"E#Fe1L1h'iN=c<U&LV"e9QL==SC_UDWVKS2#hpd"3-%'3+F<3M:@4N2)l<"P#JC'6.WP+s%(3#!rX;lC1oXGR,]OaDfSa1obC1R\!@pM?"-H8:0V\1dMT+=a2OFW8S2,>t9Uh/iU(0f?HnDR&jO%$X2S@VkWBADs?^1Dd-Rb,/P%l6J('!O:*/;OTNn'6,I0jB'5-'sXsm)<fLVS53l89Ru7fr?NYLQNk:5Jcien,Na7Z8m$\n.#J.bp6Umdi[hA8D?NsAB]u%mo@:iW%pSpst`M^;U`.i(\WM<9e8Vmo:,`/5b">Sh`L)<&Bom/JhZ%&*:afl/t&4(uKK5dlnMXsUmZf"*,Hj9s\r:#k,/E$YA*6IfX<6Vmg%AZ,?pc;;r&=\Y4+AKHS<$iUVkB&iqd,D="X4Q5hY1TVXj<G5Ki@_4>Qgm\=W)G)@PeA[+FA6DH$Jb8R`a+TXQLLWI?2)2t:A.6B3%bU@e@Ig6l)@B'ta9"-#ibR\2rEm]5:-H2.#KZn91SqXH/E?coLRC_i9]9dD90O66B&bF"l+:l!4.;ai$*%86_(j?ls0S=18i%j@i%MnliWS@6A]BGe3ElM\&-g)U[V,SgsAesNcTXYW!N`\E7m1H]-2ETV7TN/_*sASAg,MN$"BFS_U=KNNcTLA!Ku1N@\H..q>4&Yi%<%CCn?.0,-6tE-'>NP[JL+`9<`g\Sn<H6uM"M1a<A_PI@Y$'qHZ]-RO.l8Q`)<.(G)Ll8Wj0FMD,J`kbpH`kdU71F&C1NVg<\BQuu\%oTkUYS9_3T--&4qK^E#l:[,-C<JrUmd2"6Z@u/jS5SDm`CLrOrl`u&SGRJ#A-L93qM4L)a-qDV1kqC7H_DpcE+NA.]8//?BTs,]T%#QNtK/s.l4GT)C9V*gD\X[1>=k386I)^8MJ,t=mdjUBZ_4d0n6+hu&4i2NkS6nD0.S+T^i@5c;U/t).O\$-k8ff(3&dSeab<5Nsq%9>6=Q0!#o/UZ&:t^8)h?3!cA#`o\Dl[HLQoe;0S3)2C3TVUg]Xr1Td'C0_*TU$<XDYQb0#S]T;7@)ethK91LPp@b`QMWJY^"7KC4%4n(El"n?Tpi9lM6$*FfF\jFqV$[SJ_:d1\b;Dg3e1]i9LP&\I!K*@3M*1W"+XUQs_T6MM@nid5i*AZ$PM=oSeeie,JQ%1.HfC7KN%#.2.'"6n.<EC2nbIMN7m#cC2s...tWp98NJ!M#tZ68$LuN/=bq#^*odis=-m)"BuW4CBA"Wi<,TWnRuX9Ou!SSTC4(JK=TL"=-Gu%+cK.r1+n@ZQKC^mSV/j6:GI__`WpdV\CQTnA3V.QHE_Q&mRYJU^cmJ"ktn0p"=2s%)o$#oA60p"$YV,"CS65IgRi-b\WON,ELa<F%'_*&qgd%=5k=rZEiZLh1^f_ES@d.+44O3BR89jj/A^#&c'hq$I-6"X]U8#4E8:[OX#"/HmWZhFX$AA1J*eA0T_YX!po9ldD<3`5a%o2$@P9Mi?uXNi5;Q@j,n,mU12(QFtXcO"6Wm8n'd+H2b>Saeu$VkG0S:7[<T;-.7:L0c+4j>8oHOH.AdH64<3/fb'0*0ujNlN(FC%*;U/"/[AW-@7E`mct8[F?DQ,0YopQ!=.;^E]>F;)2X@FNJZpiQFSse_\=#:!if-'MRT4#h/g%unE%_=tj<?5'`:ZNd(6jb.X9^&)%*O(tT/1@B]:m^r#!Ds:1npp1KDnTcdMU&USUqfd?nB=!)XWoAi[BLdg+)<g6[b8eQ"=0Fa[615\%cQFk+H<bP,EEcee.uk3(Ur#e%nKI=1JKaZM1>C;\O*0f"=iJ$R=><V%`/#c4R6(NRh6)#WV95-\\p:B?6U7a$`9k\r(!L(%SKq;?AVOT4F?6<B0Eb%EJ^r^Y^+9Nq%/+aHa\.X)H4S,A)I>hlk@"%&Q\u,VS12\@i:AI%8nj#!eSs?LoB*f@2$aQ;IMk_e=Tb019of5O9-K:!\UTmNhAO6GhL_^X:6ma#c%jCP$[C-&JJ.G-QsI+n<[Z&q<%:#&dO2c/O%9O:@Xh`(6a"4k(pV[8:?UNF_PG*2R<%o'G7+_69p+!FkDoE;KoaMf0YA=mQ_i\2ad%QKH;V$X41*..,5Vm1WJXB%d[DKe3Q<6`l)Fa!1[!ou4qdTlZ>`ek.Etgs%7T?6T\L[a*+XSXAO#iCJO*^Xp(oP)geqh.=`.JLB6X%IHb-aC]sEk>DUZ.#Z5<udMSnS*i$U[g`Y%N#LspM;V4%UQ"gN?mGqN^0;"t[W@Y/lf6bYLPIuEEWY_Ip!t]6YcZeT#!A.Vf2MC9N%!Ft0:QI&b9]Xc>Q_9V=JgCrZ;j<0mf/0qYZfYK8g5VoVUND]OY&A"i>EF,ZuPO`<JOPVr;+f9l(@cO=5%+&`Uf>TNU]L6d$f25H#%R$.aUSSK\0AG;[[/EVR[rhS7OE\`Nb>EtOckkqGK4r(EGkQZq?/<elPN51_<eZN!^1@q(OA?g.$SE?ZSBXI8@>U@DAZfk)9!G%:`%Qq31l)XBK>h6R[H@Jps/oLCqTQ?(!!+=recZ&NF+8]3ZM8##9Lnid_8(f+PP#g-s5l8(ua"4oP@TrW":J9@'a[u!/9P1-!*@FJn&%mAL]\@VpX2=\_Ht7e46%pd!</b&U;BXrTG4g*c_/qmjp=icR'\.5<]GI)`H<d&*<nK^b5lJ=/QB0j]XrL1_bl=kc6`Vt&,7OUD`a%P7rnLd*fp)8B-jH:h23aU$:^rZ`/ETj6X&G*i1R[GFW6T,W*b$2?="U<?jnY]GZJHEOf6X\kRAsE17=k)bSP:;;+dp3VM6DAf'M5%H*;2HIOY[n:j1=0%<BpMLauKE;mB2kFsJn6Q-+Re6T</SZV'!]oYe^q]!_i6:IDI!cMc3p,E^rH1ugU#FE7_a.np@aO1<*DDN31\%B(%99Dt&(0H5*%j^)DS^T8qF2Pd$Bn:j>Zgp*Oke#U)L6pK"33&4S63QL-bURY>mDfeS^%-<,@gBq&?HB1d0RbJjhX3"HA4fc@oh%/\(15lk,ftOG8=6.b/P[#=kg!cNV\HL@a?n0QqmP*Y52RhqIKQSi.jCLQj4,QRk\>YrI\"mKoA?YKtV]cCA3mR<Pc'W4WhBbt9_<%V\IP3*POFn@r6iI'BjC2L$h*)=t8U)19'!+hU`V&r)B=hL=L-?Ke!&F;qa;p3pS[3Z0m<o:Zs^4%27t]7_/s%SfR"A3%DiB?dt8L%@["jgoP(F<XBCR*pl5c\9*t2=%RpHl/ifps3/mLb;Vdk?+tgO9-)H9CCSW5g*H<D+Vf]R>OD4`GStXm,PdN,^O+W,T"V(r%=MfhQ%+ZXKpMd[p+CfP#KaCokr<9,7>ROKHpkJe\OZSj=7kSb=i,HVL\,iOAZek<5O0Y,*>R&rQeF"(O08&L!5VkIBd@h[Tb5Wt"#"el.C%hN]K`m1;t_(2#l<J4J$J@\i=rZ5gjC.5Ks#=h;UV>X.DkL>&:3$ps\)Ue3fbC.m@lKTX'%nJ<Z,=P]L3o.bLDju'ssGXmKClO88N%c*YnGYf9XQJn,Xd(8>fo;qE^/#M5(l?*kkHcc3od1E025dr]?XX[Ql?EY-fPni\4M/af\u[J7-J2_8'RV_,AVmNH@ng4:fOLsK3r%Z',e34`U"`;9Ot42&\M-6*Jt/+D6U%$dm%%04>!W>j2Z?SX%b@/iab[KaC)1N=`DH,@pqK)KJHj51":T(<5M_BFEP.)=asIj@p8.%A(`7D6Yu=8#YWg5d2?dB9CFHY-8_pYaA)c0"$^UDqNO`\d%5NajUsm>YbF9a!=;m:kk>LErGso\@aQa@Vl[+AZdL_;@cg95-+?'L%I8#D$`Pf]1f%AEu$%^Kcb9$oE2<;+jp.*"]/[:6-9tSmN*7,\Ddr>Hp6]9*H`A!ndf6e2G',_lFKD!'PQD5mq6.*%p(ZV6"Y>Q[8%-ZCefG-Phf&.#[>Ts?IpSFduU)>i->e7BI&dfB^fh8R682PP;u%m^i!E1hm,BhLR"!]*^5!dO&d;gi@'7#A7mbBCI;5l1.qW`L,#%A34+1&4g0C6Uu;K,Id?8Sp"n?][(]89?R.5(e_7JCCo1nKYWX2UJ,fuG)(Doc'oX=Sd@.kJaX^>>;'B@UHJu@P0/ceZaaHS6L&4'%GS<t>1P#i_4Di$V$J<Se!@*=2K>u2K@>u)kK[Oq&:dV$'%F8kTLXKc"0L^;UFQ;juS60?Cn3gWd.&W0jb:?M>+"'C,6miVG'*ob/%kRN>1FIY2IF&-)I&3gurBH'H@k\QZObtt5f4Y#hWV_O/O)^dN)Wu-O]dr#>mQs6(TZC]!2(?RMJ?Zdc[ogmk8Pf=3!',:.7#pH'?%63mh^-&P9c(7%"8(?4!sQP-/W]'-454C;))QJc\mhU@4Z:?a>NV:J's"MmGZXa,T'):$i%M;Lp(Adj\Ed+M6A**+dr)N7t8`/&^U%YnSrOM$MbS(cs&W;)tSRf/=5O9mfb$TRhG>i8\+bcO)g!q^P>5]KMh,_/"4QI7=D'MJD=^6jsf%-jp>aOL+l6Ya@RW4rd2`/G39+%pS(c2KuH\m0Pn6#B?kjs'3EhZbW<fl\$2rt>,^gEM&VmnbB1OfAkS>28!l$)W:E8PnT2i`l^@JK3Zc(IYPC=G90#^3,oC`g;T>Es%N.97VD)U3o8k0NQ_)BU5`_,#gM2FjX\2_`Gh6F+BePROhPg;i.=_CSsXOll*JYA9XYEC/g-_?0[Zc5_,'ebd1jm'XhU/KoS+\3Rj%[(/d?4<TT]aZUA#b2J#=KD;kl_83K:m7<UR\kl@DT!G>JVl3F;F;j:8+"S^M=fG)W,Joh#;Pd<&'#IdIq-JgJbc=<eJ-3pCSVArY%[(3nHM9`u]FI"l98'p2)%_fBmoM\dMfRYe&d`(CRfcX:8;?ER?0&G'"d<&'O+0[>rbLcQ7/0.41V^klSB$k<9)X6Q6!`>OijV\`T%eh7CJeh>KT4./j5Z@#5OO5`";8Kg4IJb5+Patj'/?.L8D[Y.f!F:C$c`3N!V4FAcuUP"8"88Rif5NCn-CRD_8Anm]IqH5<CmZPk;%U'$)h0B*R=Yu\5or+Tr6"\e)MkqnStE(ZiX.@0mr,^>rcj<lLOjq[2+Ac]/*bQ;C6D=GCdk%Hj@imLRP%ZoqVn_NAt=(cVBq;Pk!%C2354kP9nfj*uNMhmS!j*WMc'Z/_l84OrBf&,^#*kO&*$rUoRRf\Nass$6q'@NM/1g3g6WqZ#VrGkh~>%AI9_PrivateDataEnd